import platform

env=Environment(
  tools=['default', fuzzed_builders])  

# Build backend modules by triggering CMake
# TODO: This is obviousely a hack, build directly with SCons instead

# Let CMake run to generate Makefile
# This always needs to run, in order to consider Vagrant / native flipping
if platform.system() == "Darwin":
    cmake_call = "cmake -D CMAKE_C_COMPILER=/usr/local/bin/gcc-4.9 -D CMAKE_CXX_COMPILER=/usr/local/bin/g++-4.9 ."
else:
    cmake_call = "cmake ."
makefile = env.Command(['CMakeCache.txt','Makefile'], 'CMakeLists.txt', cmake_call,
                        chdir='backends')
Clean(makefile, 'backends/CMakeFiles')
AlwaysBuild(makefile)

# Build configuration engine
ftconfiguration_targets = 'lib/ftconfiguration_exe'
ftconfiguration = env.Command(ftconfiguration_targets, 
                              [Dir('fuzztreeconfiguration'), makefile],
                              'make ftconfiguration_exe',
                              chdir='backends')
Clean(ftconfiguration, 'backends/CMakeFiles')
Alias('ftconfiguration', ftconfiguration)

# Build analysis engine
ftanalysis_targets = 'lib/ftanalysis_exe'
ftanalysis = env.Command(ftanalysis_targets, 
                         [Dir('fuzztreeanalysis'), makefile],
                         'make ftanalysis_exe',
                         chdir='backends')
Clean(ftanalysis, 'backends/CMakeFiles')
Alias('ftanalysis', ftanalysis)

# Build simulation engine
ftsimulation_targets = 'lib/ftsimulation_exe'
ftsimulation = env.Command(ftsimulation_targets, 
                         [Dir('simulation'), makefile],
                         'make ftsimulation',
                         chdir='backends')
Clean(ftsimulation, 'backends/CMakeFiles')
Alias('ftsimulation', ftsimulation)
