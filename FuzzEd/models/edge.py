from django.db import models
import json

from node import Node
from graph import Graph

class Edge(models.Model):
    """
    Class: Edge

    Models a generic edge for any diagram notation that connects two nodes with each other.

    Attributes:
     {long}   client_id  - the id of the edge as generated by the client
     {<Node>} source     - starting point of the edge
     {<Node>} target     - endpoint of the edge
     {bool}   deleted    - flag indicating whether the edge was deleted. Simplifies the restoration of the edge by
                           toggling this switch.
    """
    class Meta:
        app_label = 'FuzzEd'

    client_id = models.BigIntegerField()
    graph     = models.ForeignKey(Graph, null=False, related_name='edges')
    source    = models.ForeignKey(Node,  null=False, related_name='outgoing')
    target    = models.ForeignKey(Node,  null=False, related_name='incoming')
    deleted   = models.BooleanField(default=False)
    #TODO: maybe add a reference to the graph. this would simplify the JSON-serialization of the graph

    def __unicode__(self):
        prefix = '[DELETED] ' if self.deleted else ''
        return  unicode('%s%s -> %s' % (prefix, str(self.source), str(self.target)))

    def to_dict(self):
        """
        Method: to_dict
        
        Represents this edge as a native dictionary
        
        Returns:
         {dict} the edge as dictionary
        """
        return {
            'id':     self.client_id,
            'graph':  self.graph.pk,
            'source': self.source.client_id,
            'target': self.target.client_id
        }

    def to_graphml(self):
        """
        Method: to_graphml

        Serializes this edge instance to its graphml representation

        Returns:
         {str} the edge in graphml
        """
        return '       <edge source="%s" target="%s" />\n' % (self.source.client_id, self.target.client_id,)

    def to_json(self):
        """
        Method: to_json

        Serializes the values of the edge into a python dictionary that is JSON conform.

        Returns:
         {dict} the edge as dictionary
        """
        return json.dumps(self.to_dict())
