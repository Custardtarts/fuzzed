# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-03-13 13:58
from __future__ import unicode_literals

import FuzzEd.models.job
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('costs', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Edge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.BigIntegerField()),
                ('deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('dfd', 'Data Flow Diagram'), ('faulttree', 'Fault Tree'), ('fuzztree', 'Fuzz Tree'), ('rbd', 'Reliability Block Diagram')], max_length=127)),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('read_only', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graphs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graph_modified', models.DateTimeField()),
                ('secret', models.CharField(default=FuzzEd.models.job.gen_uuid, max_length=64)),
                ('kind', models.CharField(choices=[('mincut', 'Cutset computation'), ('topevent', 'Top event calculation (analytical)'), ('simulation', 'Top event calculation (simulation)'), ('eps', 'EPS rendering job'), ('pdf', 'PDF rendering job')], max_length=127)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('exit_code', models.IntegerField(null=True)),
                ('graph', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='FuzzEd.Graph')),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.BigIntegerField(default=-9223372036854775807)),
                ('kind', models.CharField(choices=[('Data Flow Diagram', (('node', 'Node'), ('process', 'Process'), ('stickyNote', 'Sticky Note'), ('storage', 'Storage'), ('external', 'External Entity'))), ('Fault Tree', (('dynamicGate', 'Dynamic Gate'), ('intermediateEventSet', 'Intermediate Event Set'), ('xorGate', 'XOR Gate'), ('undevelopedEvent', 'Undeveloped Event'), ('event', 'Event'), ('houseEvent', 'House Event'), ('eventSet', 'Event Set'), ('stickyNote', 'Sticky Note'), ('spareGate', 'Spare Gate'), ('intermediateEvent', 'Intermediate Event'), ('fdepGate', 'FDEP Gate'), ('staticGate', 'Static Gate'), ('gate', 'Gate'), ('seqGate', 'Sequential Gate'), ('node', 'Node'), ('transferIn', 'Transfer In'), ('basicEvent', 'Basic Event'), ('andGate', 'AND Gate'), ('basicEventSet', 'Basic Event Set'), ('votingOrGate', 'Voting OR Gate'), ('orGate', 'OR Gate'), ('topEvent', 'Top Event'), ('priorityAndGate', 'Priority AND Gate'))), ('Fuzz Tree', (('dynamicGate', 'Dynamic Gate'), ('intermediateEventSet', 'Intermediate Event Set'), ('xorGate', 'XOR Gate'), ('undevelopedEvent', 'Undeveloped Event'), ('event', 'Event'), ('houseEvent', 'House Event'), ('eventSet', 'eventSet'), ('stickyNote', 'Sticky Note'), ('intermediateEvent', 'Intermediate Event'), ('staticGate', 'Static Gate'), ('gate', 'Gate'), ('node', 'Node'), ('featureVariation', 'Feature Variation'), ('redundancyVariation', 'Redundancy Variation'), ('transferIn', 'Transfer In'), ('basicEvent', 'Basic Event'), ('andGate', 'AND Gate'), ('basicEventSet', 'Basic Event Set'), ('variationPoint', 'Variation Point'), ('votingOrGate', 'Voting OR Gate'), ('orGate', 'OR Gate'), ('topEvent', 'Top Event'))), ('Reliability Block Diagram', (('node', 'Node'), ('stickyNote', 'Sticky Note'), ('end', 'End'), ('out_of', 'Out of'), ('start', 'Start'), ('block', 'Block')))], max_length=127)),
                ('x', models.IntegerField(default=0)),
                ('y', models.IntegerField(default=0)),
                ('deleted', models.BooleanField(default=False)),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='FuzzEd.Graph')),
            ],
        ),
        migrations.CreateModel(
            name='NodeConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting', models.TextField()),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='node_configurations', to='FuzzEd.Configuration')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='FuzzEd.Node')),
            ],
        ),
        migrations.CreateModel(
            name='NodeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.BigIntegerField(default=-9223372036854775807)),
                ('deleted', models.BooleanField(default=False)),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='FuzzEd.Graph')),
                ('nodes', models.ManyToManyField(to='FuzzEd.Node')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('text', models.CharField(max_length=255)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('deleted', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='own_projects', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('deleted', models.BooleanField(default=False)),
                ('edge', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='FuzzEd.Edge')),
                ('node', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='FuzzEd.Node')),
                ('node_group', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='FuzzEd.NodeGroup')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('G', 'graphissues'), ('S', 'simulation'), ('M', 'mincut'), ('T', 'topevent'), ('P', 'pdf'), ('E', 'eps')], max_length=1)),
                ('minimum', models.FloatField(null=True)),
                ('maximum', models.FloatField(null=True)),
                ('peak', models.FloatField(null=True)),
                ('reliability', models.FloatField(null=True)),
                ('mttf', models.FloatField(null=True)),
                ('timestamp', models.IntegerField(null=True)),
                ('rounds', models.IntegerField(null=True)),
                ('failures', models.IntegerField(null=True)),
                ('binary_value', models.BinaryField(null=True)),
                ('points', models.TextField(blank=True, null=True)),
                ('issues', models.TextField(blank=True, null=True)),
                ('configuration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='results', to='FuzzEd.Configuration')),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='FuzzEd.Graph')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='FuzzEd.Job')),
            ],
        ),
        migrations.CreateModel(
            name='Sharing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sharings', to='FuzzEd.Graph')),
                ('project', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sharings', to='FuzzEd.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sharings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('newsletter', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='graph',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graphs', to='FuzzEd.Project'),
        ),
        migrations.AddField(
            model_name='edge',
            name='graph',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edges', to='FuzzEd.Graph'),
        ),
        migrations.AddField(
            model_name='edge',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing', to='FuzzEd.Node'),
        ),
        migrations.AddField(
            model_name='edge',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming', to='FuzzEd.Node'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='graph',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='FuzzEd.Graph'),
        ),
    ]
