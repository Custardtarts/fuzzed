#!/usr/bin/env python

from setuptools import setup
from distutils.command.build import build as _build
from distutils.command.clean import clean as _clean
from distutils.command.sdist import sdist as _sdist

import os, sys, shutil

try:
	import json
except ImportError:
	import simplejson as json

# check FuzzEd/__init__.py for the project version number
from FuzzEd import __version__

def check_pythonversion():
	if sys.version_info.major == 2 and sys.version_info.minor < 7:
		print("You must use Python 2.7, since django-require demands this")
		exit(-1)
	if sys.version_info.major > 2:
		print("You must use Python 2, since django demands this")
		exit(-1)

def build_xmlschema_wrapper():
	print "Building XML schema wrappers ..."
	# Copy most recent schema files from calc server
	shutil.copyfile("analysis/code/net.fuzztree.model.analysis/model/AnalysisXML.xsd","FuzzEd/static/xsd/analysis.xsd")
	shutil.copyfile("analysis/code/net.fuzztree.model.fuzztree/model/FuzzTreeXML.xsd","FuzzEd/static/xsd/fuzztree.xsd")
	# Remove old binding files and generate new ones
	for f in ['xml_fuzztree.py', 'xml_analysis.py']:
		if os.path.exists("FuzzEd/models/"+f):
			os.remove("FuzzEd/models/"+f)
	os.system("pyxbgen --binding-root=FuzzEd/models/ -u FuzzEd/static/xsd/analysis.xsd -m xml_analysis -u FuzzEd/static/xsd/fuzztree.xsd -m xml_fuzztree")

def build_naturaldocs():
	print "Building documentation pages ..."
	# Build natural docs in 'docs' subdirectory
	if not os.path.exists("docs"):
		os.mkdir("docs")
	os.system("tools/NaturalDocs/NaturalDocs -i FuzzEd -o HTML docs -p docs")

def build_analysis_server():
	print "Building analysis server JAR file ..."
	current = os.getcwd()
	os.chdir("analysis/jar")
	os.system("ant clean")
	os.system("ant")
	os.chdir(current)

def build_django_require():
	print "Building compressed static files ..."
	# Use Django collectstatic, which triggers django-require optimization
	os.system("./manage.py collectstatic -v3 --noinput")

def build_notations():
	print "Building constant dictionaries ..."
	notations_dir = 'FuzzEd/static/notations/'
	file_list = os.listdir(notations_dir)
	notations = []
	for f in [os.path.join(notations_dir, file_name) for file_name in file_list]:
		if os.path.isfile(f) and f.endswith('.json'):
			notations.append(json.loads(open(f).read()))
	f=open("FuzzEd/models/notations_data.py","w")
	f.write("# DO NOT EDIT ! This file is autogenerated by 'setup.py build'\n\n")
	f.write("notations=")
	f.write(str(notations))    
	f.close()

def clean_pycs():
	print "Cleaning all PYC files ..."
	# Clean all pyc files recursively
	for root, dirs, files in os.walk('FuzzEd'):
		for name in files:
			if name.endswith(".pyc"):
				fullname = os.path.join(root, name) 
				print("Removing "+fullname)
				os.remove(fullname)

# Our overloaded 'setup.py build' command
class build(_build):
	def run(self):
		_build.run(self)
		build_xmlschema_wrapper()
		build_notations()
		build_analysis_server()

# Our overloaded 'setup.py clean' command
class clean(_clean):
	def run(self):
		_clean.run(self)
		os.system("rm -rf docs")
		clean_pycs()

# Our overloaded 'setup.py sdist' command
class sdist(_sdist):
	def run(self):
		_sdist.run(self)
		build_naturaldocs()
		build_django_require()

check_pythonversion()
setup(
	name = 'FuzzEd',
	version = __version__,
	install_requires=[
		'django',
		'south',
		'openid2rp',
		'django-require',
		'minbool',
		'pyxb'
	],
	packages = ['FuzzEd'],
	include_package_data = True,
	cmdclass={'build': build, 'clean': clean, 'sdist': sdist},
	maintainer = "Peter Troeger",
	maintainer_email ="peter.troeger@hpi.uni-potsdam.de",
	url = "https://bitbucket.org/troeger/fuzztrees"
)
