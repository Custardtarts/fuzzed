# This is the central runtime configuration file for all FuzzEd sub-projects
#
# - Uppercase configurations directly become Django settings.
# - Lowercase configurations settings are translated to subproject settings
#   by the build.configs step (check 'fab -l'). 
# - PROJECT_ROOT in the config value refers to the root directory on the host.
# - Settings starting with 'backend_' become part of backends/daemon.ini

# Settings for both development and production system
[all]
VERSION					= 0.5
db_user                 = fuzztrees
db_password             = fuzztrees
db_name                 = fuzztrees
db_test_name            = test_fuzztrees
db_type                 = postgresql_psycopg2
db_host			        = localhost
ADMINS                  = (('Peter Troeger', 'peter.troeger@hpi.uni-potsdam.de'),)
MANAGERS                = ADMINS
EMAIL_SUBJECT_PREFIX    = '[FuzzEd] '
AUTH_PROFILE_MODULE     = 'FuzzEd.UserProfile'
LANGUAGE_CODE           = 'en-en'
LOGIN_REDIRECT_URL      = '/dashboard/'
LOGIN_URL               = '/'
EMAIL_HOST              = 'localhost'
SEND_BROKEN_LINK_EMAILS = False
SERVER_EMAIL            = 'webmaster@fuzztrees.net'
REQUIRE_BASE_URL        = 'script'
REQUIRE_BUILD_PROFILE   = '../lib/requirejs/require_build_profile.js'
REQUIRE_JS              = '../lib/requirejs/require-jquery.js'
ROOT_URLCONF            = 'FuzzEd.urls'
SECRET_KEY              = 'ki4t8(rtjqg*fqe=%3f@9*8a2xq8uub9616sstri1afl^@@4hw'
SITE_ID                 = 1
STATICFILES_DIRS        = ('FuzzEd/static',)   
STATICFILES_STORAGE     = 'require.storage.OptimizedStaticFilesStorage'
STATIC_ROOT             = 'FuzzEd/static-release/'   
STATIC_URL              = '/static/'
MEDIA_ROOT              = ''
MEDIA_URL               = ''
TIME_ZONE               = None                        
USE_I18N                = False                         
USE_L10N                = True                          
USE_TZ                  = False                           
WSGI_APPLICATION        = 'FuzzEd.wsgi.application'    
add_auth_backends       = 'openid2rp.django.auth.Backend'
add_installed_apps      = 'openid2rp.django','south','require','FuzzEd'
add_middleware          = 'FuzzEd.middleware.HttpErrorMiddleware'
add_static_finders      = 
add_context_processors  = 'FuzzEd.contextprocessors.footer'
backend_daemon_port     = 8888
backend_log_file		= /tmp/fuzzed_backend.log
log_file                = /tmp/fuzzed.log

# Settings for development systems
[development]
DEBUG                   = True
EMAIL_BACKEND           = 'django.core.mail.backends.console.EmailBackend'
SERVER                  = 'http://localhost:8000'
OPENID_RETURN           = 'http://localhost:8000/login/?openidreturn'
TEMPLATE_DEBUG          = True
TEMPLATE_DIRS           = ('FuzzEd/templates', 'FuzzEd/static/img')
logger_requests         = console
logger_fuzzed           = console
backend_daemon_host     = localhost

# Settings for vagrant development systems
[vagrant]
DEBUG                   = True
EMAIL_BACKEND           = 'django.core.mail.backends.console.EmailBackend'
SERVER                  = 'http://192.168.33.10:8000'
OPENID_RETURN           = 'http://192.168.33.10:8000/login/?openidreturn'
TEMPLATE_DEBUG          = True
TEMPLATE_DIRS           = ('FuzzEd/templates', 'FuzzEd/static/img')
logger_requests         = console
logger_fuzzed           = console
backend_daemon_host     = localhost

# Settings for production systems
[production]
ALLOWED_HOSTS           = ['fuzztrees.net', 'www.fuzztrees.net'] 
DEBUG                   = False
EMAIL_BACKEND           = 'django.core.mail.backends.smtp.EmailBackend'
SERVER                  = 'http://www.fuzztrees.net'
OPENID_RETURN           = 'http://www.fuzztrees.net/login/?openidreturn'
TEMPLATE_DEBUG          = False
TEMPLATE_DIRS           = (PROJECT_ROOT+'/static-release/img',)
logger_requests         = False
logger_fuzzed           = file
backend_daemon_host     = 134.119.1.223
deployment_web_host     = web.netclients-services.de

# Settings for different backend services run by backends/daemon.py
# Paths should be relative to ./backends/

[backend_eps_rendering]
executable				= python ./rendering/render.py --eps
output		            = graph.eps
job_kind				= eps
log_file				= backend_eps.log

[backend_pdf_rendering]
executable				= python ./rendering/render.py --pdf
output		            = graph.pdf
job_kind				= pdf
log_file				= backend_pdf.log

[backend_topevent]
executable				= lib/ftanalysis_exe
output		            = result.xml
job_kind				= topevent
log_file				= backend_topevent.log

[backend_configuration]
executable				= lib/ftconfiguration_exe
output		            = result.xml
job_kind				= cutsets
log_file				= backend_configuration.log

[backend_simulation]
executable				= lib/ftsimulation
output		            = result.xml
job_kind				= simulation
log_file				= backend_simulation.log

