// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef C__DEV_FUZZTREES_FUZZTREECONFIGURATION_XML_FAULTTREE_H
#define C__DEV_FUZZTREES_FUZZTREECONFIGURATION_XML_FAULTTREE_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type Type;
  typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;
  typedef ::xsd::cxx::tree::type Container;

  // 8-bit
  //
  typedef signed char Byte;
  typedef unsigned char UnsignedByte;

  // 16-bit
  //
  typedef short Short;
  typedef unsigned short UnsignedShort;

  // 32-bit
  //
  typedef int Int;
  typedef unsigned int UnsignedInt;

  // 64-bit
  //
  typedef long long Long;
  typedef unsigned long long UnsignedLong;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long Integer;
  typedef long long NonPositiveInteger;
  typedef unsigned long long NonNegativeInteger;
  typedef unsigned long long PositiveInteger;
  typedef long long NegativeInteger;

  // Boolean.
  //
  typedef bool Boolean;

  // Floating-point types.
  //
  typedef float Float;
  typedef double Double;
  typedef double Decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
  typedef ::xsd::cxx::tree::name< char, Token > Name;
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
  typedef ::xsd::cxx::tree::language< char, Token > Language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > Buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone TimeZone;
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags Flags;
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity Severity;
  typedef ::xsd::cxx::tree::error< char > Error;
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > Exception;
  typedef ::xsd::cxx::tree::bounds< char > Bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
  typedef ::xsd::cxx::tree::parsing< char > Parsing;
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace faulttree
{
  class Annotation;
  class Probability;
  class AnnotatedElement;
  class Model;
  class Node;
  class ChildNode;
  class FaultTree;
  class TopEvent;
  class CrispProbability;
  class Gate;
  class And;
  class Or;
  class Xor;
  class VotingOr;
  class DynamicGate;
  class Idlist;
  class ColdSpare;
  class PriorityAnd;
  class Sequence;
  class FDEP;
  class TransferIn;
  class UndevelopedEvent;
  class BasicEvent;
  class HouseEvent;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace faulttree
{
  class Annotation: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    Annotation ();

    Annotation (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    Annotation (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    Annotation (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    Annotation (const Annotation& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual Annotation*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Annotation ();
  };

  class Probability: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    Probability ();

    Probability (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    Probability (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    Probability (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    Probability (const Probability& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual Probability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Probability ();
  };

  class AnnotatedElement: public ::xml_schema::Type
  {
    public:
    // annotations
    // 
    typedef ::faulttree::Annotation AnnotationsType;
    typedef ::xsd::cxx::tree::sequence< AnnotationsType > AnnotationsSequence;
    typedef AnnotationsSequence::iterator AnnotationsIterator;
    typedef AnnotationsSequence::const_iterator AnnotationsConstIterator;
    typedef ::xsd::cxx::tree::traits< AnnotationsType, char > AnnotationsTraits;

    const AnnotationsSequence&
    annotations () const;

    AnnotationsSequence&
    annotations ();

    void
    annotations (const AnnotationsSequence& s);

    // id
    // 
    typedef ::xml_schema::Int IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    id () const;

    IdType&
    id ();

    void
    id (const IdType& x);

    // name
    // 
    typedef ::xml_schema::String NameType;
    typedef ::xsd::cxx::tree::optional< NameType > NameOptional;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameOptional&
    name () const;

    NameOptional&
    name ();

    void
    name (const NameType& x);

    void
    name (const NameOptional& x);

    void
    name (::std::auto_ptr< NameType > p);

    // Constructors.
    //
    AnnotatedElement (const IdType&);

    AnnotatedElement (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    AnnotatedElement (const AnnotatedElement& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual AnnotatedElement*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~AnnotatedElement ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AnnotationsSequence annotations_;
    ::xsd::cxx::tree::one< IdType > id_;
    NameOptional name_;
  };

  class Model: public ::faulttree::AnnotatedElement
  {
    public:
    // Constructors.
    //
    Model (const IdType&);

    Model (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    Model (const Model& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    virtual Model*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Model ();
  };

  class Node: public ::faulttree::AnnotatedElement
  {
    public:
    // children
    // 
    typedef ::faulttree::ChildNode ChildrenType;
    typedef ::xsd::cxx::tree::sequence< ChildrenType > ChildrenSequence;
    typedef ChildrenSequence::iterator ChildrenIterator;
    typedef ChildrenSequence::const_iterator ChildrenConstIterator;
    typedef ::xsd::cxx::tree::traits< ChildrenType, char > ChildrenTraits;

    const ChildrenSequence&
    children () const;

    ChildrenSequence&
    children ();

    void
    children (const ChildrenSequence& s);

    // x
    // 
    typedef ::xml_schema::Int XType;
    typedef ::xsd::cxx::tree::optional< XType > XOptional;
    typedef ::xsd::cxx::tree::traits< XType, char > XTraits;

    const XOptional&
    x () const;

    XOptional&
    x ();

    void
    x (const XType& x);

    void
    x (const XOptional& x);

    // y
    // 
    typedef ::xml_schema::Int YType;
    typedef ::xsd::cxx::tree::optional< YType > YOptional;
    typedef ::xsd::cxx::tree::traits< YType, char > YTraits;

    const YOptional&
    y () const;

    YOptional&
    y ();

    void
    y (const YType& x);

    void
    y (const YOptional& x);

    // Constructors.
    //
    Node (const IdType&);

    Node (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    Node (const Node& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual Node*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Node ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ChildrenSequence children_;
    XOptional x_;
    YOptional y_;
  };

  class ChildNode: public ::faulttree::Node
  {
    public:
    // Constructors.
    //
    ChildNode (const IdType&);

    ChildNode (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    ChildNode (const ChildNode& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual ChildNode*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ChildNode ();
  };

  class FaultTree: public ::faulttree::Model
  {
    public:
    // topEvent
    // 
    typedef ::faulttree::TopEvent TopEventType;
    typedef ::xsd::cxx::tree::traits< TopEventType, char > TopEventTraits;

    const TopEventType&
    topEvent () const;

    TopEventType&
    topEvent ();

    void
    topEvent (const TopEventType& x);

    void
    topEvent (::std::auto_ptr< TopEventType > p);

    // Constructors.
    //
    FaultTree (const IdType&,
               const TopEventType&);

    FaultTree (const IdType&,
               ::std::auto_ptr< TopEventType >&);

    FaultTree (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    FaultTree (const FaultTree& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual FaultTree*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~FaultTree ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TopEventType > topEvent_;
  };

  class TopEvent: public ::faulttree::Node
  {
    public:
    // Constructors.
    //
    TopEvent (const IdType&);

    TopEvent (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    TopEvent (const TopEvent& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual TopEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~TopEvent ();
  };

  class CrispProbability: public ::faulttree::Probability
  {
    public:
    // value
    // 
    typedef ::xml_schema::Double ValueType;
    typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

    const ValueType&
    value () const;

    ValueType&
    value ();

    void
    value (const ValueType& x);

    // Constructors.
    //
    CrispProbability (const ValueType&);

    CrispProbability (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    CrispProbability (const CrispProbability& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual CrispProbability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~CrispProbability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ValueType > value_;
  };

  class Gate: public ::faulttree::ChildNode
  {
    public:
    // Constructors.
    //
    Gate (const IdType&);

    Gate (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    Gate (const Gate& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual Gate*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Gate ();
  };

  class And: public ::faulttree::Gate
  {
    public:
    // Constructors.
    //
    And (const IdType&);

    And (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    And (const And& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    virtual And*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~And ();
  };

  class Or: public ::faulttree::Gate
  {
    public:
    // Constructors.
    //
    Or (const IdType&);

    Or (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    Or (const Or& x,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    virtual Or*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Or ();
  };

  class Xor: public ::faulttree::Gate
  {
    public:
    // Constructors.
    //
    Xor (const IdType&);

    Xor (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    Xor (const Xor& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    virtual Xor*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Xor ();
  };

  class VotingOr: public ::faulttree::Gate
  {
    public:
    // k
    // 
    typedef ::xml_schema::Int KType;
    typedef ::xsd::cxx::tree::traits< KType, char > KTraits;

    const KType&
    k () const;

    KType&
    k ();

    void
    k (const KType& x);

    // Constructors.
    //
    VotingOr (const IdType&,
              const KType&);

    VotingOr (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    VotingOr (const VotingOr& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual VotingOr*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VotingOr ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< KType > k_;
  };

  class DynamicGate: public ::faulttree::Gate
  {
    public:
    // Constructors.
    //
    DynamicGate (const IdType&);

    DynamicGate (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    DynamicGate (const DynamicGate& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual DynamicGate*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~DynamicGate ();
  };

  class Idlist: public ::xml_schema::SimpleType,
    public ::xsd::cxx::tree::list< ::xml_schema::Int, char >
  {
    public:
    Idlist ();

    Idlist (size_type n, const ::xml_schema::Int& x);

    template < typename I >
    Idlist (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::Int, char > (begin, end, this)
    {
    }

    Idlist (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    Idlist (const ::xercesc::DOMAttr& a,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    Idlist (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    Idlist (const Idlist& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    virtual Idlist*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Idlist ();
  };

  class ColdSpare: public ::faulttree::DynamicGate
  {
    public:
    // spareIds
    // 
    typedef ::faulttree::Idlist SpareIdsType;
    typedef ::xsd::cxx::tree::traits< SpareIdsType, char > SpareIdsTraits;

    const SpareIdsType&
    spareIds () const;

    SpareIdsType&
    spareIds ();

    void
    spareIds (const SpareIdsType& x);

    void
    spareIds (::std::auto_ptr< SpareIdsType > p);

    // Constructors.
    //
    ColdSpare (const IdType&,
               const SpareIdsType&);

    ColdSpare (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    ColdSpare (const ColdSpare& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual ColdSpare*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ColdSpare ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SpareIdsType > spareIds_;
  };

  class PriorityAnd: public ::faulttree::DynamicGate
  {
    public:
    // priorityIds
    // 
    typedef ::faulttree::Idlist PriorityIdsType;
    typedef ::xsd::cxx::tree::traits< PriorityIdsType, char > PriorityIdsTraits;

    const PriorityIdsType&
    priorityIds () const;

    PriorityIdsType&
    priorityIds ();

    void
    priorityIds (const PriorityIdsType& x);

    void
    priorityIds (::std::auto_ptr< PriorityIdsType > p);

    // Constructors.
    //
    PriorityAnd (const IdType&,
                 const PriorityIdsType&);

    PriorityAnd (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    PriorityAnd (const PriorityAnd& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual PriorityAnd*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~PriorityAnd ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< PriorityIdsType > priorityIds_;
  };

  class Sequence: public ::faulttree::DynamicGate
  {
    public:
    // eventSequence
    // 
    typedef ::faulttree::Idlist EventSequenceType;
    typedef ::xsd::cxx::tree::traits< EventSequenceType, char > EventSequenceTraits;

    const EventSequenceType&
    eventSequence () const;

    EventSequenceType&
    eventSequence ();

    void
    eventSequence (const EventSequenceType& x);

    void
    eventSequence (::std::auto_ptr< EventSequenceType > p);

    // Constructors.
    //
    Sequence (const IdType&,
              const EventSequenceType&);

    Sequence (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    Sequence (const Sequence& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual Sequence*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Sequence ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< EventSequenceType > eventSequence_;
  };

  class FDEP: public ::faulttree::DynamicGate
  {
    public:
    // triggeredEvents
    // 
    typedef ::faulttree::Idlist TriggeredEventsType;
    typedef ::xsd::cxx::tree::traits< TriggeredEventsType, char > TriggeredEventsTraits;

    const TriggeredEventsType&
    triggeredEvents () const;

    TriggeredEventsType&
    triggeredEvents ();

    void
    triggeredEvents (const TriggeredEventsType& x);

    void
    triggeredEvents (::std::auto_ptr< TriggeredEventsType > p);

    // Constructors.
    //
    FDEP (const IdType&,
          const TriggeredEventsType&);

    FDEP (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    FDEP (const FDEP& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual FDEP*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~FDEP ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TriggeredEventsType > triggeredEvents_;
  };

  class TransferIn: public ::faulttree::ChildNode
  {
    public:
    // fromModelId
    // 
    typedef ::xml_schema::Int FromModelIdType;
    typedef ::xsd::cxx::tree::traits< FromModelIdType, char > FromModelIdTraits;

    const FromModelIdType&
    fromModelId () const;

    FromModelIdType&
    fromModelId ();

    void
    fromModelId (const FromModelIdType& x);

    // maxCosts
    // 
    typedef ::xml_schema::Int MaxCostsType;
    typedef ::xsd::cxx::tree::traits< MaxCostsType, char > MaxCostsTraits;

    const MaxCostsType&
    maxCosts () const;

    MaxCostsType&
    maxCosts ();

    void
    maxCosts (const MaxCostsType& x);

    static MaxCostsType
    maxCostsDefaultValue ();

    // Constructors.
    //
    TransferIn (const IdType&,
                const FromModelIdType&);

    TransferIn (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    TransferIn (const TransferIn& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual TransferIn*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~TransferIn ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< FromModelIdType > fromModelId_;
    ::xsd::cxx::tree::one< MaxCostsType > maxCosts_;
  };

  class UndevelopedEvent: public ::faulttree::ChildNode
  {
    public:
    // Constructors.
    //
    UndevelopedEvent (const IdType&);

    UndevelopedEvent (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    UndevelopedEvent (const UndevelopedEvent& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual UndevelopedEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~UndevelopedEvent ();
  };

  class BasicEvent: public ::faulttree::ChildNode
  {
    public:
    // probability
    // 
    typedef ::faulttree::Probability ProbabilityType;
    typedef ::xsd::cxx::tree::traits< ProbabilityType, char > ProbabilityTraits;

    const ProbabilityType&
    probability () const;

    ProbabilityType&
    probability ();

    void
    probability (const ProbabilityType& x);

    void
    probability (::std::auto_ptr< ProbabilityType > p);

    // Constructors.
    //
    BasicEvent (const IdType&,
                const ProbabilityType&);

    BasicEvent (const IdType&,
                ::std::auto_ptr< ProbabilityType >&);

    BasicEvent (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    BasicEvent (const BasicEvent& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual BasicEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~BasicEvent ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ProbabilityType > probability_;
  };

  class HouseEvent: public ::faulttree::BasicEvent
  {
    public:
    // Constructors.
    //
    HouseEvent (const IdType&,
                const ProbabilityType&);

    HouseEvent (const IdType&,
                ::std::auto_ptr< ProbabilityType >&);

    HouseEvent (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    HouseEvent (const HouseEvent& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual HouseEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~HouseEvent ();
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace faulttree
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::std::string& uri,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::std::string& uri,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xercesc::InputSource& is,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xercesc::InputSource& is,
             ::xml_schema::ErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::Flags f = 0,
             const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace faulttree
{
  void
  operator<< (::xercesc::DOMElement&, const Annotation&);

  void
  operator<< (::xercesc::DOMAttr&, const Annotation&);

  void
  operator<< (::xml_schema::ListStream&,
              const Annotation&);

  void
  operator<< (::xercesc::DOMElement&, const Probability&);

  void
  operator<< (::xercesc::DOMAttr&, const Probability&);

  void
  operator<< (::xml_schema::ListStream&,
              const Probability&);

  void
  operator<< (::xercesc::DOMElement&, const AnnotatedElement&);

  void
  operator<< (::xercesc::DOMElement&, const Model&);

  void
  operator<< (::xercesc::DOMElement&, const Node&);

  void
  operator<< (::xercesc::DOMElement&, const ChildNode&);

  void
  operator<< (::xercesc::DOMElement&, const FaultTree&);

  // Serialize to std::ostream.
  //

  void
  faultTree (::std::ostream& os,
             const ::faulttree::FaultTree& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  faultTree (::std::ostream& os,
             const ::faulttree::FaultTree& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  faultTree (::std::ostream& os,
             const ::faulttree::FaultTree& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  faultTree (::xercesc::XMLFormatTarget& ft,
             const ::faulttree::FaultTree& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  faultTree (::xercesc::XMLFormatTarget& ft,
             const ::faulttree::FaultTree& x, 
             ::xml_schema::ErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  void
  faultTree (::xercesc::XMLFormatTarget& ft,
             const ::faulttree::FaultTree& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  faultTree (::xercesc::DOMDocument& d,
             const ::faulttree::FaultTree& x,
             ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  faultTree (const ::faulttree::FaultTree& x, 
             const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
             ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const TopEvent&);

  void
  operator<< (::xercesc::DOMElement&, const CrispProbability&);

  void
  operator<< (::xercesc::DOMElement&, const Gate&);

  void
  operator<< (::xercesc::DOMElement&, const And&);

  void
  operator<< (::xercesc::DOMElement&, const Or&);

  void
  operator<< (::xercesc::DOMElement&, const Xor&);

  void
  operator<< (::xercesc::DOMElement&, const VotingOr&);

  void
  operator<< (::xercesc::DOMElement&, const DynamicGate&);

  void
  operator<< (::xercesc::DOMElement&, const Idlist&);

  void
  operator<< (::xercesc::DOMAttr&, const Idlist&);

  void
  operator<< (::xml_schema::ListStream&,
              const Idlist&);

  void
  operator<< (::xercesc::DOMElement&, const ColdSpare&);

  void
  operator<< (::xercesc::DOMElement&, const PriorityAnd&);

  void
  operator<< (::xercesc::DOMElement&, const Sequence&);

  void
  operator<< (::xercesc::DOMElement&, const FDEP&);

  void
  operator<< (::xercesc::DOMElement&, const TransferIn&);

  void
  operator<< (::xercesc::DOMElement&, const UndevelopedEvent&);

  void
  operator<< (::xercesc::DOMElement&, const BasicEvent&);

  void
  operator<< (::xercesc::DOMElement&, const HouseEvent&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // C__DEV_FUZZTREES_FUZZTREECONFIGURATION_XML_FAULTTREE_H
