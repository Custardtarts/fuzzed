// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include <faulttree.h>

namespace faulttree
{
  // Annotation
  // 


  // Probability
  // 


  // AnnotatedElement
  // 

  const AnnotatedElement::AnnotationsSequence& AnnotatedElement::
  annotations () const
  {
    return this->annotations_;
  }

  AnnotatedElement::AnnotationsSequence& AnnotatedElement::
  annotations ()
  {
    return this->annotations_;
  }

  void AnnotatedElement::
  annotations (const AnnotationsSequence& s)
  {
    this->annotations_ = s;
  }

  const AnnotatedElement::IdType& AnnotatedElement::
  id () const
  {
    return this->id_.get ();
  }

  AnnotatedElement::IdType& AnnotatedElement::
  id ()
  {
    return this->id_.get ();
  }

  void AnnotatedElement::
  id (const IdType& x)
  {
    this->id_.set (x);
  }

  void AnnotatedElement::
  id (::std::auto_ptr< IdType > x)
  {
    this->id_.set (x);
  }

  const AnnotatedElement::NameOptional& AnnotatedElement::
  name () const
  {
    return this->name_;
  }

  AnnotatedElement::NameOptional& AnnotatedElement::
  name ()
  {
    return this->name_;
  }

  void AnnotatedElement::
  name (const NameType& x)
  {
    this->name_.set (x);
  }

  void AnnotatedElement::
  name (const NameOptional& x)
  {
    this->name_ = x;
  }

  void AnnotatedElement::
  name (::std::auto_ptr< NameType > x)
  {
    this->name_.set (x);
  }


  // Model
  // 


  // Node
  // 

  const Node::ChildrenSequence& Node::
  children () const
  {
    return this->children_;
  }

  Node::ChildrenSequence& Node::
  children ()
  {
    return this->children_;
  }

  void Node::
  children (const ChildrenSequence& s)
  {
    this->children_ = s;
  }

  const Node::XOptional& Node::
  x () const
  {
    return this->x_;
  }

  Node::XOptional& Node::
  x ()
  {
    return this->x_;
  }

  void Node::
  x (const XType& x)
  {
    this->x_.set (x);
  }

  void Node::
  x (const XOptional& x)
  {
    this->x_ = x;
  }

  const Node::YOptional& Node::
  y () const
  {
    return this->y_;
  }

  Node::YOptional& Node::
  y ()
  {
    return this->y_;
  }

  void Node::
  y (const YType& x)
  {
    this->y_.set (x);
  }

  void Node::
  y (const YOptional& x)
  {
    this->y_ = x;
  }


  // ChildNode
  // 


  // FaultTree
  // 

  const FaultTree::TopEventType& FaultTree::
  topEvent () const
  {
    return this->topEvent_.get ();
  }

  FaultTree::TopEventType& FaultTree::
  topEvent ()
  {
    return this->topEvent_.get ();
  }

  void FaultTree::
  topEvent (const TopEventType& x)
  {
    this->topEvent_.set (x);
  }

  void FaultTree::
  topEvent (::std::auto_ptr< TopEventType > x)
  {
    this->topEvent_.set (x);
  }


  // TopEvent
  // 


  // CrispProbability
  // 

  const CrispProbability::ValueType& CrispProbability::
  value () const
  {
    return this->value_.get ();
  }

  CrispProbability::ValueType& CrispProbability::
  value ()
  {
    return this->value_.get ();
  }

  void CrispProbability::
  value (const ValueType& x)
  {
    this->value_.set (x);
  }


  // Gate
  // 


  // And
  // 


  // Or
  // 


  // Xor
  // 


  // VotingOr
  // 

  const VotingOr::KType& VotingOr::
  k () const
  {
    return this->k_.get ();
  }

  VotingOr::KType& VotingOr::
  k ()
  {
    return this->k_.get ();
  }

  void VotingOr::
  k (const KType& x)
  {
    this->k_.set (x);
  }


  // DynamicGate
  // 


  // Idlist
  //

  Idlist::
  Idlist ()
  : ::xsd::cxx::tree::list< ::xml_schema::String, char > ( ::xml_schema::Flags (0), this)
  {
  }

  Idlist::
  Idlist (size_type n, const ::xml_schema::String& x)
  : ::xsd::cxx::tree::list< ::xml_schema::String, char > (n, x, this)
  {
  }

  Idlist::
  Idlist (const Idlist& o,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (o, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::String, char > (o, f, this)
  {
  }

  // Spare
  // 

  const Spare::SpareIdsType& Spare::
  spareIds () const
  {
    return this->spareIds_.get ();
  }

  Spare::SpareIdsType& Spare::
  spareIds ()
  {
    return this->spareIds_.get ();
  }

  void Spare::
  spareIds (const SpareIdsType& x)
  {
    this->spareIds_.set (x);
  }

  void Spare::
  spareIds (::std::auto_ptr< SpareIdsType > x)
  {
    this->spareIds_.set (x);
  }

  const Spare::DormancyFactorType& Spare::
  dormancyFactor () const
  {
    return this->dormancyFactor_.get ();
  }

  Spare::DormancyFactorType& Spare::
  dormancyFactor ()
  {
    return this->dormancyFactor_.get ();
  }

  void Spare::
  dormancyFactor (const DormancyFactorType& x)
  {
    this->dormancyFactor_.set (x);
  }


  // PriorityAnd
  // 

  const PriorityAnd::EventSequenceType& PriorityAnd::
  eventSequence () const
  {
    return this->eventSequence_.get ();
  }

  PriorityAnd::EventSequenceType& PriorityAnd::
  eventSequence ()
  {
    return this->eventSequence_.get ();
  }

  void PriorityAnd::
  eventSequence (const EventSequenceType& x)
  {
    this->eventSequence_.set (x);
  }

  void PriorityAnd::
  eventSequence (::std::auto_ptr< EventSequenceType > x)
  {
    this->eventSequence_.set (x);
  }


  // Sequence
  // 

  const Sequence::EventSequenceType& Sequence::
  eventSequence () const
  {
    return this->eventSequence_.get ();
  }

  Sequence::EventSequenceType& Sequence::
  eventSequence ()
  {
    return this->eventSequence_.get ();
  }

  void Sequence::
  eventSequence (const EventSequenceType& x)
  {
    this->eventSequence_.set (x);
  }

  void Sequence::
  eventSequence (::std::auto_ptr< EventSequenceType > x)
  {
    this->eventSequence_.set (x);
  }


  // FDEP
  // 

  const FDEP::TriggerType& FDEP::
  trigger () const
  {
    return this->trigger_.get ();
  }

  FDEP::TriggerType& FDEP::
  trigger ()
  {
    return this->trigger_.get ();
  }

  void FDEP::
  trigger (const TriggerType& x)
  {
    this->trigger_.set (x);
  }

  void FDEP::
  trigger (::std::auto_ptr< TriggerType > x)
  {
    this->trigger_.set (x);
  }

  const FDEP::TriggeredEventsType& FDEP::
  triggeredEvents () const
  {
    return this->triggeredEvents_.get ();
  }

  FDEP::TriggeredEventsType& FDEP::
  triggeredEvents ()
  {
    return this->triggeredEvents_.get ();
  }

  void FDEP::
  triggeredEvents (const TriggeredEventsType& x)
  {
    this->triggeredEvents_.set (x);
  }

  void FDEP::
  triggeredEvents (::std::auto_ptr< TriggeredEventsType > x)
  {
    this->triggeredEvents_.set (x);
  }


  // TransferIn
  // 

  const TransferIn::FromModelIdType& TransferIn::
  fromModelId () const
  {
    return this->fromModelId_.get ();
  }

  TransferIn::FromModelIdType& TransferIn::
  fromModelId ()
  {
    return this->fromModelId_.get ();
  }

  void TransferIn::
  fromModelId (const FromModelIdType& x)
  {
    this->fromModelId_.set (x);
  }

  const TransferIn::MaxCostsType& TransferIn::
  maxCosts () const
  {
    return this->maxCosts_.get ();
  }

  TransferIn::MaxCostsType& TransferIn::
  maxCosts ()
  {
    return this->maxCosts_.get ();
  }

  void TransferIn::
  maxCosts (const MaxCostsType& x)
  {
    this->maxCosts_.set (x);
  }

  TransferIn::MaxCostsType TransferIn::
  maxCostsDefaultValue ()
  {
    return MaxCostsType (0);
  }


  // UndevelopedEvent
  // 


  // BasicEvent
  // 

  const BasicEvent::ProbabilityType& BasicEvent::
  probability () const
  {
    return this->probability_.get ();
  }

  BasicEvent::ProbabilityType& BasicEvent::
  probability ()
  {
    return this->probability_.get ();
  }

  void BasicEvent::
  probability (const ProbabilityType& x)
  {
    this->probability_.set (x);
  }

  void BasicEvent::
  probability (::std::auto_ptr< ProbabilityType > x)
  {
    this->probability_.set (x);
  }


  // HouseEvent
  // 


  // IntermediateEvent
  // 
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace faulttree
{
  // Annotation
  //

  Annotation::
  Annotation ()
  : ::xml_schema::Type ()
  {
  }

  Annotation::
  Annotation (const Annotation& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  Annotation::
  Annotation (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f, c)
  {
  }

  Annotation::
  Annotation (const ::xercesc::DOMAttr& a,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (a, f, c)
  {
  }

  Annotation::
  Annotation (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::xml_schema::Type (s, e, f, c)
  {
  }

  Annotation* Annotation::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Annotation (*this, f, c);
  }

  Annotation::
  ~Annotation ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Annotation >
  _xsd_Annotation_type_factory_init (
    "Annotation",
    "net.faulttree");

  // Probability
  //

  Probability::
  Probability ()
  : ::xml_schema::Type ()
  {
  }

  Probability::
  Probability (const Probability& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c)
  {
  }

  Probability::
  Probability (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f, c)
  {
  }

  Probability::
  Probability (const ::xercesc::DOMAttr& a,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (a, f, c)
  {
  }

  Probability::
  Probability (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xml_schema::Type (s, e, f, c)
  {
  }

  Probability* Probability::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Probability (*this, f, c);
  }

  Probability::
  ~Probability ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Probability >
  _xsd_Probability_type_factory_init (
    "Probability",
    "net.faulttree");

  // AnnotatedElement
  //

  AnnotatedElement::
  AnnotatedElement (const IdType& id)
  : ::xml_schema::Type (),
    annotations_ (::xml_schema::Flags (), this),
    id_ (id, ::xml_schema::Flags (), this),
    name_ (::xml_schema::Flags (), this)
  {
  }

  AnnotatedElement::
  AnnotatedElement (const AnnotatedElement& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    annotations_ (x.annotations_, f, this),
    id_ (x.id_, f, this),
    name_ (x.name_, f, this)
  {
  }

  AnnotatedElement::
  AnnotatedElement (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    annotations_ (f, this),
    id_ (f, this),
    name_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void AnnotatedElement::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // annotations
      //
      {
        ::xsd::cxx::tree::type_factory_map< char >& tfm (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          tfm.create (
            "annotations",
            "",
            &::xsd::cxx::tree::factory_impl< AnnotationsType >,
            false, false, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::auto_ptr< AnnotationsType > r (
            dynamic_cast< AnnotationsType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->annotations_.push_back (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< IdType > r (
          IdTraits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< NameType > r (
          NameTraits::create (i, f, this));

        this->name_.set (r);
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  AnnotatedElement* AnnotatedElement::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class AnnotatedElement (*this, f, c);
  }

  AnnotatedElement::
  ~AnnotatedElement ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, AnnotatedElement >
  _xsd_AnnotatedElement_type_factory_init (
    "AnnotatedElement",
    "net.faulttree");

  // Model
  //

  Model::
  Model (const IdType& id)
  : ::faulttree::AnnotatedElement (id)
  {
  }

  Model::
  Model (const Model& x,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
  : ::faulttree::AnnotatedElement (x, f, c)
  {
  }

  Model::
  Model (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
  : ::faulttree::AnnotatedElement (e, f, c)
  {
  }

  Model* Model::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Model (*this, f, c);
  }

  Model::
  ~Model ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Model >
  _xsd_Model_type_factory_init (
    "Model",
    "net.faulttree");

  // Node
  //

  Node::
  Node (const IdType& id)
  : ::faulttree::AnnotatedElement (id),
    children_ (::xml_schema::Flags (), this),
    x_ (::xml_schema::Flags (), this),
    y_ (::xml_schema::Flags (), this)
  {
  }

  Node::
  Node (const Node& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::faulttree::AnnotatedElement (x, f, c),
    children_ (x.children_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this)
  {
  }

  Node::
  Node (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::faulttree::AnnotatedElement (e, f | ::xml_schema::Flags::base, c),
    children_ (f, this),
    x_ (f, this),
    y_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Node::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::AnnotatedElement::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // children
      //
      {
        ::xsd::cxx::tree::type_factory_map< char >& tfm (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          tfm.create (
            "children",
            "",
            &::xsd::cxx::tree::factory_impl< ChildrenType >,
            false, false, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::auto_ptr< ChildrenType > r (
            dynamic_cast< ChildrenType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->children_.push_back (r);
          continue;
        }
      }

      break;
    }

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        this->x_.set (XTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        this->y_.set (YTraits::create (i, f, this));
        continue;
      }
    }
  }

  Node* Node::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Node (*this, f, c);
  }

  Node::
  ~Node ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Node >
  _xsd_Node_type_factory_init (
    "Node",
    "net.faulttree");

  // ChildNode
  //

  ChildNode::
  ChildNode (const IdType& id)
  : ::faulttree::Node (id)
  {
  }

  ChildNode::
  ChildNode (const ChildNode& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::faulttree::Node (x, f, c)
  {
  }

  ChildNode::
  ChildNode (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::faulttree::Node (e, f, c)
  {
  }

  ChildNode* ChildNode::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ChildNode (*this, f, c);
  }

  ChildNode::
  ~ChildNode ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ChildNode >
  _xsd_ChildNode_type_factory_init (
    "ChildNode",
    "net.faulttree");

  // FaultTree
  //

  FaultTree::
  FaultTree (const IdType& id,
             const TopEventType& topEvent)
  : ::faulttree::Model (id),
    topEvent_ (topEvent, ::xml_schema::Flags (), this)
  {
  }

  FaultTree::
  FaultTree (const IdType& id,
             ::std::auto_ptr< TopEventType >& topEvent)
  : ::faulttree::Model (id),
    topEvent_ (topEvent, ::xml_schema::Flags (), this)
  {
  }

  FaultTree::
  FaultTree (const FaultTree& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::faulttree::Model (x, f, c),
    topEvent_ (x.topEvent_, f, this)
  {
  }

  FaultTree::
  FaultTree (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::faulttree::Model (e, f | ::xml_schema::Flags::base, c),
    topEvent_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void FaultTree::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::Model::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // topEvent
      //
      {
        ::xsd::cxx::tree::type_factory_map< char >& tfm (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          tfm.create (
            "topEvent",
            "",
            &::xsd::cxx::tree::factory_impl< TopEventType >,
            false, false, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!topEvent_.present ())
          {
            ::std::auto_ptr< TopEventType > r (
              dynamic_cast< TopEventType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->topEvent_.set (r);
            continue;
          }
        }
      }

      break;
    }

    if (!topEvent_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "topEvent",
        "");
    }
  }

  FaultTree* FaultTree::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class FaultTree (*this, f, c);
  }

  FaultTree::
  ~FaultTree ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FaultTree >
  _xsd_FaultTree_type_factory_init (
    "FaultTree",
    "net.faulttree");

  // TopEvent
  //

  TopEvent::
  TopEvent (const IdType& id)
  : ::faulttree::Node (id)
  {
  }

  TopEvent::
  TopEvent (const TopEvent& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::faulttree::Node (x, f, c)
  {
  }

  TopEvent::
  TopEvent (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::faulttree::Node (e, f, c)
  {
  }

  TopEvent* TopEvent::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class TopEvent (*this, f, c);
  }

  TopEvent::
  ~TopEvent ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TopEvent >
  _xsd_TopEvent_type_factory_init (
    "TopEvent",
    "net.faulttree");

  // CrispProbability
  //

  CrispProbability::
  CrispProbability (const ValueType& value)
  : ::faulttree::Probability (),
    value_ (value, ::xml_schema::Flags (), this)
  {
  }

  CrispProbability::
  CrispProbability (const CrispProbability& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::faulttree::Probability (x, f, c),
    value_ (x.value_, f, this)
  {
  }

  CrispProbability::
  CrispProbability (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::faulttree::Probability (e, f | ::xml_schema::Flags::base, c),
    value_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void CrispProbability::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        this->value_.set (ValueTraits::create (i, f, this));
        continue;
      }
    }

    if (!value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "value",
        "");
    }
  }

  CrispProbability* CrispProbability::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class CrispProbability (*this, f, c);
  }

  CrispProbability::
  ~CrispProbability ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, CrispProbability >
  _xsd_CrispProbability_type_factory_init (
    "CrispProbability",
    "net.faulttree");

  // Gate
  //

  Gate::
  Gate (const IdType& id)
  : ::faulttree::ChildNode (id)
  {
  }

  Gate::
  Gate (const Gate& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::faulttree::ChildNode (x, f, c)
  {
  }

  Gate::
  Gate (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::faulttree::ChildNode (e, f, c)
  {
  }

  Gate* Gate::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Gate (*this, f, c);
  }

  Gate::
  ~Gate ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Gate >
  _xsd_Gate_type_factory_init (
    "Gate",
    "net.faulttree");

  // And
  //

  And::
  And (const IdType& id)
  : ::faulttree::Gate (id)
  {
  }

  And::
  And (const And& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::faulttree::Gate (x, f, c)
  {
  }

  And::
  And (const ::xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::faulttree::Gate (e, f, c)
  {
  }

  And* And::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class And (*this, f, c);
  }

  And::
  ~And ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, And >
  _xsd_And_type_factory_init (
    "And",
    "net.faulttree");

  // Or
  //

  Or::
  Or (const IdType& id)
  : ::faulttree::Gate (id)
  {
  }

  Or::
  Or (const Or& x,
      ::xml_schema::Flags f,
      ::xml_schema::Container* c)
  : ::faulttree::Gate (x, f, c)
  {
  }

  Or::
  Or (const ::xercesc::DOMElement& e,
      ::xml_schema::Flags f,
      ::xml_schema::Container* c)
  : ::faulttree::Gate (e, f, c)
  {
  }

  Or* Or::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Or (*this, f, c);
  }

  Or::
  ~Or ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Or >
  _xsd_Or_type_factory_init (
    "Or",
    "net.faulttree");

  // Xor
  //

  Xor::
  Xor (const IdType& id)
  : ::faulttree::Gate (id)
  {
  }

  Xor::
  Xor (const Xor& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::faulttree::Gate (x, f, c)
  {
  }

  Xor::
  Xor (const ::xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
  : ::faulttree::Gate (e, f, c)
  {
  }

  Xor* Xor::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Xor (*this, f, c);
  }

  Xor::
  ~Xor ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Xor >
  _xsd_Xor_type_factory_init (
    "Xor",
    "net.faulttree");

  // VotingOr
  //

  VotingOr::
  VotingOr (const IdType& id,
            const KType& k)
  : ::faulttree::Gate (id),
    k_ (k, ::xml_schema::Flags (), this)
  {
  }

  VotingOr::
  VotingOr (const VotingOr& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::faulttree::Gate (x, f, c),
    k_ (x.k_, f, this)
  {
  }

  VotingOr::
  VotingOr (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::faulttree::Gate (e, f | ::xml_schema::Flags::base, c),
    k_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void VotingOr::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::Gate::parse (p, f);

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "k" && n.namespace_ ().empty ())
      {
        this->k_.set (KTraits::create (i, f, this));
        continue;
      }
    }

    if (!k_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "k",
        "");
    }
  }

  VotingOr* VotingOr::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class VotingOr (*this, f, c);
  }

  VotingOr::
  ~VotingOr ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, VotingOr >
  _xsd_VotingOr_type_factory_init (
    "VotingOr",
    "net.faulttree");

  // DynamicGate
  //

  DynamicGate::
  DynamicGate (const IdType& id)
  : ::faulttree::Gate (id)
  {
  }

  DynamicGate::
  DynamicGate (const DynamicGate& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::faulttree::Gate (x, f, c)
  {
  }

  DynamicGate::
  DynamicGate (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::faulttree::Gate (e, f, c)
  {
  }

  DynamicGate* DynamicGate::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DynamicGate (*this, f, c);
  }

  DynamicGate::
  ~DynamicGate ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, DynamicGate >
  _xsd_DynamicGate_type_factory_init (
    "DynamicGate",
    "net.faulttree");

  // Idlist
  //

  Idlist::
  Idlist (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (e, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::String, char > (e, f, this)
  {
  }

  Idlist::
  Idlist (const ::xercesc::DOMAttr& a,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (a, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::String, char > (a, f, this)
  {
  }

  Idlist::
  Idlist (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::SimpleType (s, e, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::String, char > (s, e, f, this)
  {
  }

  Idlist* Idlist::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Idlist (*this, f, c);
  }

  Idlist::
  ~Idlist ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Idlist >
  _xsd_Idlist_type_factory_init (
    "idlist",
    "net.faulttree");

  // Spare
  //

  Spare::
  Spare (const IdType& id,
         const SpareIdsType& spareIds,
         const DormancyFactorType& dormancyFactor)
  : ::faulttree::DynamicGate (id),
    spareIds_ (spareIds, ::xml_schema::Flags (), this),
    dormancyFactor_ (dormancyFactor, ::xml_schema::Flags (), this)
  {
  }

  Spare::
  Spare (const Spare& x,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (x, f, c),
    spareIds_ (x.spareIds_, f, this),
    dormancyFactor_ (x.dormancyFactor_, f, this)
  {
  }

  Spare::
  Spare (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (e, f | ::xml_schema::Flags::base, c),
    spareIds_ (f, this),
    dormancyFactor_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Spare::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::DynamicGate::parse (p, f);

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "spareIds" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< SpareIdsType > r (
          SpareIdsTraits::create (i, f, this));

        this->spareIds_.set (r);
        continue;
      }

      if (n.name () == "dormancyFactor" && n.namespace_ ().empty ())
      {
        this->dormancyFactor_.set (DormancyFactorTraits::create (i, f, this));
        continue;
      }
    }

    if (!spareIds_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "spareIds",
        "");
    }

    if (!dormancyFactor_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "dormancyFactor",
        "");
    }
  }

  Spare* Spare::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Spare (*this, f, c);
  }

  Spare::
  ~Spare ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Spare >
  _xsd_Spare_type_factory_init (
    "Spare",
    "net.faulttree");

  // PriorityAnd
  //

  PriorityAnd::
  PriorityAnd (const IdType& id,
               const EventSequenceType& eventSequence)
  : ::faulttree::DynamicGate (id),
    eventSequence_ (eventSequence, ::xml_schema::Flags (), this)
  {
  }

  PriorityAnd::
  PriorityAnd (const PriorityAnd& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (x, f, c),
    eventSequence_ (x.eventSequence_, f, this)
  {
  }

  PriorityAnd::
  PriorityAnd (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (e, f | ::xml_schema::Flags::base, c),
    eventSequence_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void PriorityAnd::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::DynamicGate::parse (p, f);

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "eventSequence" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< EventSequenceType > r (
          EventSequenceTraits::create (i, f, this));

        this->eventSequence_.set (r);
        continue;
      }
    }

    if (!eventSequence_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "eventSequence",
        "");
    }
  }

  PriorityAnd* PriorityAnd::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class PriorityAnd (*this, f, c);
  }

  PriorityAnd::
  ~PriorityAnd ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, PriorityAnd >
  _xsd_PriorityAnd_type_factory_init (
    "PriorityAnd",
    "net.faulttree");

  // Sequence
  //

  Sequence::
  Sequence (const IdType& id,
            const EventSequenceType& eventSequence)
  : ::faulttree::DynamicGate (id),
    eventSequence_ (eventSequence, ::xml_schema::Flags (), this)
  {
  }

  Sequence::
  Sequence (const Sequence& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (x, f, c),
    eventSequence_ (x.eventSequence_, f, this)
  {
  }

  Sequence::
  Sequence (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (e, f | ::xml_schema::Flags::base, c),
    eventSequence_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void Sequence::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::DynamicGate::parse (p, f);

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "eventSequence" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< EventSequenceType > r (
          EventSequenceTraits::create (i, f, this));

        this->eventSequence_.set (r);
        continue;
      }
    }

    if (!eventSequence_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "eventSequence",
        "");
    }
  }

  Sequence* Sequence::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Sequence (*this, f, c);
  }

  Sequence::
  ~Sequence ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, Sequence >
  _xsd_Sequence_type_factory_init (
    "Sequence",
    "net.faulttree");

  // FDEP
  //

  FDEP::
  FDEP (const IdType& id,
        const TriggerType& trigger,
        const TriggeredEventsType& triggeredEvents)
  : ::faulttree::DynamicGate (id),
    trigger_ (trigger, ::xml_schema::Flags (), this),
    triggeredEvents_ (triggeredEvents, ::xml_schema::Flags (), this)
  {
  }

  FDEP::
  FDEP (const FDEP& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (x, f, c),
    trigger_ (x.trigger_, f, this),
    triggeredEvents_ (x.triggeredEvents_, f, this)
  {
  }

  FDEP::
  FDEP (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::faulttree::DynamicGate (e, f | ::xml_schema::Flags::base, c),
    trigger_ (f, this),
    triggeredEvents_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void FDEP::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::DynamicGate::parse (p, f);

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "trigger" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< TriggerType > r (
          TriggerTraits::create (i, f, this));

        this->trigger_.set (r);
        continue;
      }

      if (n.name () == "triggeredEvents" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< TriggeredEventsType > r (
          TriggeredEventsTraits::create (i, f, this));

        this->triggeredEvents_.set (r);
        continue;
      }
    }

    if (!trigger_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "trigger",
        "");
    }

    if (!triggeredEvents_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "triggeredEvents",
        "");
    }
  }

  FDEP* FDEP::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class FDEP (*this, f, c);
  }

  FDEP::
  ~FDEP ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, FDEP >
  _xsd_FDEP_type_factory_init (
    "FDEP",
    "net.faulttree");

  // TransferIn
  //

  TransferIn::
  TransferIn (const IdType& id,
              const FromModelIdType& fromModelId)
  : ::faulttree::ChildNode (id),
    fromModelId_ (fromModelId, ::xml_schema::Flags (), this),
    maxCosts_ (maxCostsDefaultValue (), ::xml_schema::Flags (), this)
  {
  }

  TransferIn::
  TransferIn (const TransferIn& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::faulttree::ChildNode (x, f, c),
    fromModelId_ (x.fromModelId_, f, this),
    maxCosts_ (x.maxCosts_, f, this)
  {
  }

  TransferIn::
  TransferIn (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::faulttree::ChildNode (e, f | ::xml_schema::Flags::base, c),
    fromModelId_ (f, this),
    maxCosts_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void TransferIn::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::ChildNode::parse (p, f);

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "fromModelId" && n.namespace_ ().empty ())
      {
        this->fromModelId_.set (FromModelIdTraits::create (i, f, this));
        continue;
      }

      if (n.name () == "maxCosts" && n.namespace_ ().empty ())
      {
        this->maxCosts_.set (MaxCostsTraits::create (i, f, this));
        continue;
      }
    }

    if (!fromModelId_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "fromModelId",
        "");
    }

    if (!maxCosts_.present ())
    {
      this->maxCosts_.set (maxCostsDefaultValue ());
    }
  }

  TransferIn* TransferIn::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class TransferIn (*this, f, c);
  }

  TransferIn::
  ~TransferIn ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TransferIn >
  _xsd_TransferIn_type_factory_init (
    "TransferIn",
    "net.faulttree");

  // UndevelopedEvent
  //

  UndevelopedEvent::
  UndevelopedEvent (const IdType& id)
  : ::faulttree::ChildNode (id)
  {
  }

  UndevelopedEvent::
  UndevelopedEvent (const UndevelopedEvent& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::faulttree::ChildNode (x, f, c)
  {
  }

  UndevelopedEvent::
  UndevelopedEvent (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::faulttree::ChildNode (e, f, c)
  {
  }

  UndevelopedEvent* UndevelopedEvent::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class UndevelopedEvent (*this, f, c);
  }

  UndevelopedEvent::
  ~UndevelopedEvent ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, UndevelopedEvent >
  _xsd_UndevelopedEvent_type_factory_init (
    "UndevelopedEvent",
    "net.faulttree");

  // BasicEvent
  //

  BasicEvent::
  BasicEvent (const IdType& id,
              const ProbabilityType& probability)
  : ::faulttree::ChildNode (id),
    probability_ (probability, ::xml_schema::Flags (), this)
  {
  }

  BasicEvent::
  BasicEvent (const IdType& id,
              ::std::auto_ptr< ProbabilityType >& probability)
  : ::faulttree::ChildNode (id),
    probability_ (probability, ::xml_schema::Flags (), this)
  {
  }

  BasicEvent::
  BasicEvent (const BasicEvent& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::faulttree::ChildNode (x, f, c),
    probability_ (x.probability_, f, this)
  {
  }

  BasicEvent::
  BasicEvent (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::faulttree::ChildNode (e, f | ::xml_schema::Flags::base, c),
    probability_ (f, this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void BasicEvent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    this->::faulttree::ChildNode::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // probability
      //
      {
        ::xsd::cxx::tree::type_factory_map< char >& tfm (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          tfm.create (
            "probability",
            "",
            &::xsd::cxx::tree::factory_impl< ProbabilityType >,
            false, false, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!probability_.present ())
          {
            ::std::auto_ptr< ProbabilityType > r (
              dynamic_cast< ProbabilityType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->probability_.set (r);
            continue;
          }
        }
      }

      break;
    }

    if (!probability_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "probability",
        "");
    }
  }

  BasicEvent* BasicEvent::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class BasicEvent (*this, f, c);
  }

  BasicEvent::
  ~BasicEvent ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, BasicEvent >
  _xsd_BasicEvent_type_factory_init (
    "BasicEvent",
    "net.faulttree");

  // HouseEvent
  //

  HouseEvent::
  HouseEvent (const IdType& id,
              const ProbabilityType& probability)
  : ::faulttree::BasicEvent (id,
                             probability)
  {
  }

  HouseEvent::
  HouseEvent (const IdType& id,
              ::std::auto_ptr< ProbabilityType >& probability)
  : ::faulttree::BasicEvent (id,
                             probability)
  {
  }

  HouseEvent::
  HouseEvent (const HouseEvent& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::faulttree::BasicEvent (x, f, c)
  {
  }

  HouseEvent::
  HouseEvent (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
  : ::faulttree::BasicEvent (e, f, c)
  {
  }

  HouseEvent* HouseEvent::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class HouseEvent (*this, f, c);
  }

  HouseEvent::
  ~HouseEvent ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, HouseEvent >
  _xsd_HouseEvent_type_factory_init (
    "HouseEvent",
    "net.faulttree");

  // IntermediateEvent
  //

  IntermediateEvent::
  IntermediateEvent (const IdType& id)
  : ::faulttree::ChildNode (id)
  {
  }

  IntermediateEvent::
  IntermediateEvent (const IntermediateEvent& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::faulttree::ChildNode (x, f, c)
  {
  }

  IntermediateEvent::
  IntermediateEvent (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
  : ::faulttree::ChildNode (e, f, c)
  {
  }

  IntermediateEvent* IntermediateEvent::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class IntermediateEvent (*this, f, c);
  }

  IntermediateEvent::
  ~IntermediateEvent ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, IntermediateEvent >
  _xsd_IntermediateEvent_type_factory_init (
    "IntermediateEvent",
    "net.faulttree");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace faulttree
{
  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::faulttree::FaultTree > r (
      ::faulttree::faultTree (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::faulttree::FaultTree > r (
      ::faulttree::faultTree (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::faulttree::FaultTree > r (
      ::faulttree::faultTree (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::faulttree::faultTree (isrc, f, p);
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::faulttree::faultTree (isrc, h, f, p);
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::faulttree::faultTree (isrc, h, f, p);
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::faulttree::faultTree (isrc, f, p);
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::faulttree::faultTree (isrc, h, f, p);
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::faulttree::faultTree (isrc, h, f, p);
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::faulttree::FaultTree > r (
      ::faulttree::faultTree (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::faulttree::FaultTree > r (
      ::faulttree::faultTree (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::faulttree::FaultTree > r (
      ::faulttree::faultTree (
        d, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::faulttree::FaultTree > r (
        ::faulttree::faultTree (
          c, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    ::xsd::cxx::tree::type_factory_map< char >& tfm (
      ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

    ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
      tfm.create (
        "FaultTree",
        "net.faulttree",
        &::xsd::cxx::tree::factory_impl< ::faulttree::FaultTree >,
        true, true, e, n, f, 0));

    if (tmp.get () != 0)
    {
      ::std::auto_ptr< ::faulttree::FaultTree > r (
        dynamic_cast< ::faulttree::FaultTree* > (tmp.get ()));

      if (r.get ())
        tmp.release ();
      else
        throw ::xsd::cxx::tree::not_derived< char > ();

      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FaultTree",
      "net.faulttree");
  }

  ::std::auto_ptr< ::faulttree::FaultTree >
  faultTree (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    ::xsd::cxx::tree::type_factory_map< char >& tfm (
      ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

    ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
      tfm.create (
        "FaultTree",
        "net.faulttree",
        &::xsd::cxx::tree::factory_impl< ::faulttree::FaultTree >,
        true, true, e, n, f, 0));

    if (tmp.get () != 0)
    {

      ::std::auto_ptr< ::faulttree::FaultTree > r (
        dynamic_cast< ::faulttree::FaultTree* > (tmp.get ()));

      if (r.get ())
        tmp.release ();
      else
        throw ::xsd::cxx::tree::not_derived< char > ();

      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FaultTree",
      "net.faulttree");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace faulttree
{
  void
  operator<< (::xercesc::DOMElement& e, const Annotation& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&, const Annotation&)
  {
  }

  void
  operator<< (::xml_schema::ListStream&,
              const Annotation&)
  {
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Annotation >
  _xsd_Annotation_type_serializer_init (
    "Annotation",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Probability& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&, const Probability&)
  {
  }

  void
  operator<< (::xml_schema::ListStream&,
              const Probability&)
  {
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Probability >
  _xsd_Probability_type_serializer_init (
    "Probability",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const AnnotatedElement& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // annotations
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (AnnotatedElement::AnnotationsConstIterator
           b (i.annotations ().begin ()), n (i.annotations ().end ());
           b != n; ++b)
      {
        if (typeid (AnnotatedElement::AnnotationsType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "annotations",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "annotations",
            "",
            false, false, e, *b);
      }
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // name
    //
    if (i.name ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << *i.name ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, AnnotatedElement >
  _xsd_AnnotatedElement_type_serializer_init (
    "AnnotatedElement",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Model& i)
  {
    e << static_cast< const ::faulttree::AnnotatedElement& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Model >
  _xsd_Model_type_serializer_init (
    "Model",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Node& i)
  {
    e << static_cast< const ::faulttree::AnnotatedElement& > (i);

    // children
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (Node::ChildrenConstIterator
           b (i.children ().begin ()), n (i.children ().end ());
           b != n; ++b)
      {
        if (typeid (Node::ChildrenType) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "children",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "children",
            "",
            false, false, e, *b);
      }
    }

    // x
    //
    if (i.x ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "x",
          e));

      a << *i.x ();
    }

    // y
    //
    if (i.y ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "y",
          e));

      a << *i.y ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Node >
  _xsd_Node_type_serializer_init (
    "Node",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const ChildNode& i)
  {
    e << static_cast< const ::faulttree::Node& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ChildNode >
  _xsd_ChildNode_type_serializer_init (
    "ChildNode",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const FaultTree& i)
  {
    e << static_cast< const ::faulttree::Model& > (i);

    // topEvent
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const FaultTree::TopEventType& x (i.topEvent ());
      if (typeid (FaultTree::TopEventType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "topEvent",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "topEvent",
          "",
          false, false, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FaultTree >
  _xsd_FaultTree_type_serializer_init (
    "FaultTree",
    "net.faulttree");


  void
  faultTree (::std::ostream& o,
             const ::faulttree::FaultTree& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::faulttree::faultTree (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  faultTree (::std::ostream& o,
             const ::faulttree::FaultTree& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::faulttree::faultTree (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  faultTree (::std::ostream& o,
             const ::faulttree::FaultTree& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::faulttree::faultTree (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  faultTree (::xercesc::XMLFormatTarget& t,
             const ::faulttree::FaultTree& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::faulttree::faultTree (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  faultTree (::xercesc::XMLFormatTarget& t,
             const ::faulttree::FaultTree& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::faulttree::faultTree (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  faultTree (::xercesc::XMLFormatTarget& t,
             const ::faulttree::FaultTree& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::faulttree::faultTree (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  faultTree (::xercesc::DOMDocument& d,
             const ::faulttree::FaultTree& s,
             ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (typeid (::faulttree::FaultTree) == typeid (s))
    {
      if (n.name () == "FaultTree" &&
          n.namespace_ () == "net.faulttree")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FaultTree",
          "net.faulttree");
      }
    }
    else
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      tsm.serialize (
        "FaultTree",
        "net.faulttree",
        e, n, s);
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  faultTree (const ::faulttree::FaultTree& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

    if (typeid (::faulttree::FaultTree) == typeid (s))
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
        ::xsd::cxx::xml::dom::serialize< char > (
          "FaultTree",
          "net.faulttree",
          m, f));
      d = r;
    }
    else
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
        tsm.serialize (
          "FaultTree",
          "net.faulttree",
          m, s, f));
      d = r;
    }

    ::faulttree::faultTree (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const TopEvent& i)
  {
    e << static_cast< const ::faulttree::Node& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TopEvent >
  _xsd_TopEvent_type_serializer_init (
    "TopEvent",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const CrispProbability& i)
  {
    e << static_cast< const ::faulttree::Probability& > (i);

    // value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << ::xml_schema::AsDouble(i.value ());
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CrispProbability >
  _xsd_CrispProbability_type_serializer_init (
    "CrispProbability",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Gate& i)
  {
    e << static_cast< const ::faulttree::ChildNode& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Gate >
  _xsd_Gate_type_serializer_init (
    "Gate",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const And& i)
  {
    e << static_cast< const ::faulttree::Gate& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, And >
  _xsd_And_type_serializer_init (
    "And",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Or& i)
  {
    e << static_cast< const ::faulttree::Gate& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Or >
  _xsd_Or_type_serializer_init (
    "Or",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Xor& i)
  {
    e << static_cast< const ::faulttree::Gate& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Xor >
  _xsd_Xor_type_serializer_init (
    "Xor",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const VotingOr& i)
  {
    e << static_cast< const ::faulttree::Gate& > (i);

    // k
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "k",
          e));

      a << i.k ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VotingOr >
  _xsd_VotingOr_type_serializer_init (
    "VotingOr",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const DynamicGate& i)
  {
    e << static_cast< const ::faulttree::Gate& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DynamicGate >
  _xsd_DynamicGate_type_serializer_init (
    "DynamicGate",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Idlist& i)
  {
    e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::String, char >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const Idlist& i)
  {
    a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::String, char >& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const Idlist& i)
  {
    l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::String, char >& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Idlist >
  _xsd_Idlist_type_serializer_init (
    "idlist",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Spare& i)
  {
    e << static_cast< const ::faulttree::DynamicGate& > (i);

    // spareIds
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "spareIds",
          e));

      a << i.spareIds ();
    }

    // dormancyFactor
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "dormancyFactor",
          e));

      a << ::xml_schema::AsDouble(i.dormancyFactor ());
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Spare >
  _xsd_Spare_type_serializer_init (
    "Spare",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const PriorityAnd& i)
  {
    e << static_cast< const ::faulttree::DynamicGate& > (i);

    // eventSequence
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "eventSequence",
          e));

      a << i.eventSequence ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PriorityAnd >
  _xsd_PriorityAnd_type_serializer_init (
    "PriorityAnd",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const Sequence& i)
  {
    e << static_cast< const ::faulttree::DynamicGate& > (i);

    // eventSequence
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "eventSequence",
          e));

      a << i.eventSequence ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Sequence >
  _xsd_Sequence_type_serializer_init (
    "Sequence",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const FDEP& i)
  {
    e << static_cast< const ::faulttree::DynamicGate& > (i);

    // trigger
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "trigger",
          e));

      a << i.trigger ();
    }

    // triggeredEvents
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "triggeredEvents",
          e));

      a << i.triggeredEvents ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FDEP >
  _xsd_FDEP_type_serializer_init (
    "FDEP",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const TransferIn& i)
  {
    e << static_cast< const ::faulttree::ChildNode& > (i);

    // fromModelId
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "fromModelId",
          e));

      a << i.fromModelId ();
    }

    // maxCosts
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "maxCosts",
          e));

      a << i.maxCosts ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TransferIn >
  _xsd_TransferIn_type_serializer_init (
    "TransferIn",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const UndevelopedEvent& i)
  {
    e << static_cast< const ::faulttree::ChildNode& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UndevelopedEvent >
  _xsd_UndevelopedEvent_type_serializer_init (
    "UndevelopedEvent",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const BasicEvent& i)
  {
    e << static_cast< const ::faulttree::ChildNode& > (i);

    // probability
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const BasicEvent::ProbabilityType& x (i.probability ());
      if (typeid (BasicEvent::ProbabilityType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "probability",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "probability",
          "",
          false, false, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BasicEvent >
  _xsd_BasicEvent_type_serializer_init (
    "BasicEvent",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const HouseEvent& i)
  {
    e << static_cast< const ::faulttree::BasicEvent& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, HouseEvent >
  _xsd_HouseEvent_type_serializer_init (
    "HouseEvent",
    "net.faulttree");


  void
  operator<< (::xercesc::DOMElement& e, const IntermediateEvent& i)
  {
    e << static_cast< const ::faulttree::ChildNode& > (i);
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, IntermediateEvent >
  _xsd_IntermediateEvent_type_serializer_init (
    "IntermediateEvent",
    "net.faulttree");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

