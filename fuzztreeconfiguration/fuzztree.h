// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef C__DEV_FUZZTREES_FUZZTREECONFIGURATION_XML_FUZZTREE_H
#define C__DEV_FUZZTREES_FUZZTREECONFIGURATION_XML_FUZZTREE_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type Type;
  typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;
  typedef ::xsd::cxx::tree::type Container;

  // 8-bit
  //
  typedef signed char Byte;
  typedef unsigned char UnsignedByte;

  // 16-bit
  //
  typedef short Short;
  typedef unsigned short UnsignedShort;

  // 32-bit
  //
  typedef int Int;
  typedef unsigned int UnsignedInt;

  // 64-bit
  //
  typedef long long Long;
  typedef unsigned long long UnsignedLong;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long Integer;
  typedef long long NonPositiveInteger;
  typedef unsigned long long NonNegativeInteger;
  typedef unsigned long long PositiveInteger;
  typedef long long NegativeInteger;

  // Boolean.
  //
  typedef bool Boolean;

  // Floating-point types.
  //
  typedef float Float;
  typedef double Double;
  typedef double Decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
  typedef ::xsd::cxx::tree::name< char, Token > Name;
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
  typedef ::xsd::cxx::tree::language< char, Token > Language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > Buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone TimeZone;
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags Flags;
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity Severity;
  typedef ::xsd::cxx::tree::error< char > Error;
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > Exception;
  typedef ::xsd::cxx::tree::bounds< char > Bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
  typedef ::xsd::cxx::tree::parsing< char > Parsing;
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace fuzztree
{
  class AnnotatedElement;
  class Model;
  class FuzzTree;
  class Node;
  class ChildNode;
  class Gate;
  class VariationPoint;
  class InclusionVariationPoint;
  class BasicEvent;
  class TopEvent;
  class And;
  class Or;
  class Xor;
  class VotingOr;
  class FeatureVariationPoint;
  class RedundancyVariationPoint;
  class TransferIn;
  class Annotation;
  class Probability;
  class CrispProbability;
  class TriangularFuzzyInterval;
  class UndevelopedEvent;
  class IntermediateEvent;
  class BasicEventSet;
  class HouseEvent;
  class IntermediateEventSet;
  class EventSet;
  class DecomposedFuzzyProbability;
  class DoubleToIntervalMap;
  class Interval;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace fuzztree
{
  class AnnotatedElement: public ::xml_schema::Type
  {
    public:
    // annotations
    // 
    typedef ::fuzztree::Annotation AnnotationsType;
    typedef ::xsd::cxx::tree::sequence< AnnotationsType > AnnotationsSequence;
    typedef AnnotationsSequence::iterator AnnotationsIterator;
    typedef AnnotationsSequence::const_iterator AnnotationsConstIterator;
    typedef ::xsd::cxx::tree::traits< AnnotationsType, char > AnnotationsTraits;

    const AnnotationsSequence&
    annotations () const;

    AnnotationsSequence&
    annotations ();

    void
    annotations (const AnnotationsSequence& s);

    // id
    // 
    typedef ::xml_schema::String IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    id () const;

    IdType&
    id ();

    void
    id (const IdType& x);

    void
    id (::std::auto_ptr< IdType > p);

    // name
    // 
    typedef ::xml_schema::String NameType;
    typedef ::xsd::cxx::tree::optional< NameType > NameOptional;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameOptional&
    name () const;

    NameOptional&
    name ();

    void
    name (const NameType& x);

    void
    name (const NameOptional& x);

    void
    name (::std::auto_ptr< NameType > p);

    // Constructors.
    //
    AnnotatedElement (const IdType&);

    AnnotatedElement (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    AnnotatedElement (const AnnotatedElement& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual AnnotatedElement*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~AnnotatedElement ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AnnotationsSequence annotations_;
    ::xsd::cxx::tree::one< IdType > id_;
    NameOptional name_;
  };

  class Model: public ::fuzztree::AnnotatedElement
  {
    public:
    // Constructors.
    //
    Model (const IdType&);

    Model (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    Model (const Model& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    virtual Model*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Model ();
  };

  class FuzzTree: public ::fuzztree::Model
  {
    public:
    // topEvent
    // 
    typedef ::fuzztree::TopEvent TopEventType;
    typedef ::xsd::cxx::tree::traits< TopEventType, char > TopEventTraits;

    const TopEventType&
    topEvent () const;

    TopEventType&
    topEvent ();

    void
    topEvent (const TopEventType& x);

    void
    topEvent (::std::auto_ptr< TopEventType > p);

    // Constructors.
    //
    FuzzTree (const IdType&,
              const TopEventType&);

    FuzzTree (const IdType&,
              ::std::auto_ptr< TopEventType >&);

    FuzzTree (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    FuzzTree (const FuzzTree& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual FuzzTree*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~FuzzTree ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TopEventType > topEvent_;
  };

  class Node: public ::fuzztree::AnnotatedElement
  {
    public:
    // children
    // 
    typedef ::fuzztree::ChildNode ChildrenType;
    typedef ::xsd::cxx::tree::sequence< ChildrenType > ChildrenSequence;
    typedef ChildrenSequence::iterator ChildrenIterator;
    typedef ChildrenSequence::const_iterator ChildrenConstIterator;
    typedef ::xsd::cxx::tree::traits< ChildrenType, char > ChildrenTraits;

    const ChildrenSequence&
    children () const;

    ChildrenSequence&
    children ();

    void
    children (const ChildrenSequence& s);

    // x
    // 
    typedef ::xml_schema::Int XType;
    typedef ::xsd::cxx::tree::optional< XType > XOptional;
    typedef ::xsd::cxx::tree::traits< XType, char > XTraits;

    const XOptional&
    x () const;

    XOptional&
    x ();

    void
    x (const XType& x);

    void
    x (const XOptional& x);

    // y
    // 
    typedef ::xml_schema::Int YType;
    typedef ::xsd::cxx::tree::optional< YType > YOptional;
    typedef ::xsd::cxx::tree::traits< YType, char > YTraits;

    const YOptional&
    y () const;

    YOptional&
    y ();

    void
    y (const YType& x);

    void
    y (const YOptional& x);

    // Constructors.
    //
    Node (const IdType&);

    Node (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    Node (const Node& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual Node*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Node ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ChildrenSequence children_;
    XOptional x_;
    YOptional y_;
  };

  class ChildNode: public ::fuzztree::Node
  {
    public:
    // Constructors.
    //
    ChildNode (const IdType&);

    ChildNode (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    ChildNode (const ChildNode& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual ChildNode*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~ChildNode ();
  };

  class Gate: public ::fuzztree::ChildNode
  {
    public:
    // Constructors.
    //
    Gate (const IdType&);

    Gate (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    Gate (const Gate& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual Gate*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Gate ();
  };

  class VariationPoint: public ::fuzztree::ChildNode
  {
    public:
    // Constructors.
    //
    VariationPoint (const IdType&);

    VariationPoint (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    VariationPoint (const VariationPoint& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual VariationPoint*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VariationPoint ();
  };

  class InclusionVariationPoint: public ::fuzztree::VariationPoint
  {
    public:
    // optional
    // 
    typedef ::xml_schema::Boolean OptionalType;
    typedef ::xsd::cxx::tree::traits< OptionalType, char > OptionalTraits;

    const OptionalType&
    optional () const;

    OptionalType&
    optional ();

    void
    optional (const OptionalType& x);

    static OptionalType
    optionalDefaultValue ();

    // costs
    // 
    typedef ::xml_schema::Int CostsType;
    typedef ::xsd::cxx::tree::optional< CostsType > CostsOptional;
    typedef ::xsd::cxx::tree::traits< CostsType, char > CostsTraits;

    const CostsOptional&
    costs () const;

    CostsOptional&
    costs ();

    void
    costs (const CostsType& x);

    void
    costs (const CostsOptional& x);

    // Constructors.
    //
    InclusionVariationPoint (const IdType&);

    InclusionVariationPoint (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    InclusionVariationPoint (const InclusionVariationPoint& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual InclusionVariationPoint*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~InclusionVariationPoint ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OptionalType > optional_;
    CostsOptional costs_;
  };

  class BasicEvent: public ::fuzztree::InclusionVariationPoint
  {
    public:
    // probability
    // 
    typedef ::fuzztree::Probability ProbabilityType;
    typedef ::xsd::cxx::tree::traits< ProbabilityType, char > ProbabilityTraits;

    const ProbabilityType&
    probability () const;

    ProbabilityType&
    probability ();

    void
    probability (const ProbabilityType& x);

    void
    probability (::std::auto_ptr< ProbabilityType > p);

    // Constructors.
    //
    BasicEvent (const IdType&,
                const ProbabilityType&);

    BasicEvent (const IdType&,
                ::std::auto_ptr< ProbabilityType >&);

    BasicEvent (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    BasicEvent (const BasicEvent& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual BasicEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~BasicEvent ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ProbabilityType > probability_;
  };

  class TopEvent: public ::fuzztree::Node
  {
    public:
    // Constructors.
    //
    TopEvent (const IdType&);

    TopEvent (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    TopEvent (const TopEvent& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual TopEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~TopEvent ();
  };

  class And: public ::fuzztree::Gate
  {
    public:
    // Constructors.
    //
    And (const IdType&);

    And (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    And (const And& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    virtual And*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~And ();
  };

  class Or: public ::fuzztree::Gate
  {
    public:
    // Constructors.
    //
    Or (const IdType&);

    Or (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    Or (const Or& x,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

    virtual Or*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Or ();
  };

  class Xor: public ::fuzztree::Gate
  {
    public:
    // Constructors.
    //
    Xor (const IdType&);

    Xor (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    Xor (const Xor& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    virtual Xor*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Xor ();
  };

  class VotingOr: public ::fuzztree::Gate
  {
    public:
    // k
    // 
    typedef ::xml_schema::Int KType;
    typedef ::xsd::cxx::tree::traits< KType, char > KTraits;

    const KType&
    k () const;

    KType&
    k ();

    void
    k (const KType& x);

    // Constructors.
    //
    VotingOr (const IdType&,
              const KType&);

    VotingOr (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    VotingOr (const VotingOr& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual VotingOr*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VotingOr ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< KType > k_;
  };

  class FeatureVariationPoint: public ::fuzztree::VariationPoint
  {
    public:
    // Constructors.
    //
    FeatureVariationPoint (const IdType&);

    FeatureVariationPoint (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    FeatureVariationPoint (const FeatureVariationPoint& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

    virtual FeatureVariationPoint*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~FeatureVariationPoint ();
  };

  class RedundancyVariationPoint: public ::fuzztree::VariationPoint
  {
    public:
    // start
    // 
    typedef ::xml_schema::Int StartType;
    typedef ::xsd::cxx::tree::traits< StartType, char > StartTraits;

    const StartType&
    start () const;

    StartType&
    start ();

    void
    start (const StartType& x);

    // end
    // 
    typedef ::xml_schema::Int EndType;
    typedef ::xsd::cxx::tree::traits< EndType, char > EndTraits;

    const EndType&
    end () const;

    EndType&
    end ();

    void
    end (const EndType& x);

    // formula
    // 
    typedef ::xml_schema::String FormulaType;
    typedef ::xsd::cxx::tree::traits< FormulaType, char > FormulaTraits;

    const FormulaType&
    formula () const;

    FormulaType&
    formula ();

    void
    formula (const FormulaType& x);

    void
    formula (::std::auto_ptr< FormulaType > p);

    // costFormula
    // 
    typedef ::xml_schema::String CostFormulaType;
    typedef ::xsd::cxx::tree::optional< CostFormulaType > CostFormulaOptional;
    typedef ::xsd::cxx::tree::traits< CostFormulaType, char > CostFormulaTraits;

    const CostFormulaOptional&
    costFormula () const;

    CostFormulaOptional&
    costFormula ();

    void
    costFormula (const CostFormulaType& x);

    void
    costFormula (const CostFormulaOptional& x);

    void
    costFormula (::std::auto_ptr< CostFormulaType > p);

    // Constructors.
    //
    RedundancyVariationPoint (const IdType&,
                              const StartType&,
                              const EndType&,
                              const FormulaType&);

    RedundancyVariationPoint (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    RedundancyVariationPoint (const RedundancyVariationPoint& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

    virtual RedundancyVariationPoint*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~RedundancyVariationPoint ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< StartType > start_;
    ::xsd::cxx::tree::one< EndType > end_;
    ::xsd::cxx::tree::one< FormulaType > formula_;
    CostFormulaOptional costFormula_;
  };

  class TransferIn: public ::fuzztree::VariationPoint
  {
    public:
    // fromModelId
    // 
    typedef ::xml_schema::Int FromModelIdType;
    typedef ::xsd::cxx::tree::traits< FromModelIdType, char > FromModelIdTraits;

    const FromModelIdType&
    fromModelId () const;

    FromModelIdType&
    fromModelId ();

    void
    fromModelId (const FromModelIdType& x);

    // maxCosts
    // 
    typedef ::xml_schema::Int MaxCostsType;
    typedef ::xsd::cxx::tree::traits< MaxCostsType, char > MaxCostsTraits;

    const MaxCostsType&
    maxCosts () const;

    MaxCostsType&
    maxCosts ();

    void
    maxCosts (const MaxCostsType& x);

    static MaxCostsType
    maxCostsDefaultValue ();

    // Constructors.
    //
    TransferIn (const IdType&,
                const FromModelIdType&);

    TransferIn (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    TransferIn (const TransferIn& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual TransferIn*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~TransferIn ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< FromModelIdType > fromModelId_;
    ::xsd::cxx::tree::one< MaxCostsType > maxCosts_;
  };

  class Annotation: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    Annotation ();

    Annotation (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    Annotation (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    Annotation (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    Annotation (const Annotation& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual Annotation*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Annotation ();
  };

  class Probability: public ::xml_schema::Type
  {
    public:
    // Constructors.
    //
    Probability ();

    Probability (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    Probability (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    Probability (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    Probability (const Probability& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    virtual Probability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Probability ();
  };

  class CrispProbability: public ::fuzztree::Probability
  {
    public:
    // value
    // 
    typedef ::xml_schema::Double ValueType;
    typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

    const ValueType&
    value () const;

    ValueType&
    value ();

    void
    value (const ValueType& x);

    // Constructors.
    //
    CrispProbability (const ValueType&);

    CrispProbability (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    CrispProbability (const CrispProbability& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual CrispProbability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~CrispProbability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ValueType > value_;
  };

  class TriangularFuzzyInterval: public ::fuzztree::Probability
  {
    public:
    // a
    // 
    typedef ::xml_schema::Double AType;
    typedef ::xsd::cxx::tree::traits< AType, char, ::xsd::cxx::tree::schema_type::double_ > ATraits;

    const AType&
    a () const;

    AType&
    a ();

    void
    a (const AType& x);

    // b1
    // 
    typedef ::xml_schema::Double B1Type;
    typedef ::xsd::cxx::tree::traits< B1Type, char, ::xsd::cxx::tree::schema_type::double_ > B1Traits;

    const B1Type&
    b1 () const;

    B1Type&
    b1 ();

    void
    b1 (const B1Type& x);

    // b2
    // 
    typedef ::xml_schema::Double B2Type;
    typedef ::xsd::cxx::tree::traits< B2Type, char, ::xsd::cxx::tree::schema_type::double_ > B2Traits;

    const B2Type&
    b2 () const;

    B2Type&
    b2 ();

    void
    b2 (const B2Type& x);

    // c
    // 
    typedef ::xml_schema::Double CType;
    typedef ::xsd::cxx::tree::traits< CType, char, ::xsd::cxx::tree::schema_type::double_ > CTraits;

    const CType&
    c () const;

    CType&
    c ();

    void
    c (const CType& x);

    // Constructors.
    //
    TriangularFuzzyInterval (const AType&,
                             const B1Type&,
                             const B2Type&,
                             const CType&);

    TriangularFuzzyInterval (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    TriangularFuzzyInterval (const TriangularFuzzyInterval& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

    virtual TriangularFuzzyInterval*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~TriangularFuzzyInterval ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< AType > a_;
    ::xsd::cxx::tree::one< B1Type > b1_;
    ::xsd::cxx::tree::one< B2Type > b2_;
    ::xsd::cxx::tree::one< CType > c_;
  };

  class UndevelopedEvent: public ::fuzztree::ChildNode
  {
    public:
    // Constructors.
    //
    UndevelopedEvent (const IdType&);

    UndevelopedEvent (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    UndevelopedEvent (const UndevelopedEvent& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual UndevelopedEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~UndevelopedEvent ();
  };

  class IntermediateEvent: public ::fuzztree::InclusionVariationPoint
  {
    public:
    // Constructors.
    //
    IntermediateEvent (const IdType&);

    IntermediateEvent (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    IntermediateEvent (const IntermediateEvent& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

    virtual IntermediateEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~IntermediateEvent ();
  };

  class BasicEventSet: public ::fuzztree::BasicEvent
  {
    public:
    // quantity
    // 
    typedef ::xml_schema::Int QuantityType;
    typedef ::xsd::cxx::tree::optional< QuantityType > QuantityOptional;
    typedef ::xsd::cxx::tree::traits< QuantityType, char > QuantityTraits;

    const QuantityOptional&
    quantity () const;

    QuantityOptional&
    quantity ();

    void
    quantity (const QuantityType& x);

    void
    quantity (const QuantityOptional& x);

    // Constructors.
    //
    BasicEventSet (const IdType&,
                   const ProbabilityType&);

    BasicEventSet (const IdType&,
                   ::std::auto_ptr< ProbabilityType >&);

    BasicEventSet (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    BasicEventSet (const BasicEventSet& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual BasicEventSet*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~BasicEventSet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    QuantityOptional quantity_;
  };

  class HouseEvent: public ::fuzztree::BasicEvent
  {
    public:
    // Constructors.
    //
    HouseEvent (const IdType&,
                const ProbabilityType&);

    HouseEvent (const IdType&,
                ::std::auto_ptr< ProbabilityType >&);

    HouseEvent (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    HouseEvent (const HouseEvent& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    virtual HouseEvent*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~HouseEvent ();
  };

  class IntermediateEventSet: public ::fuzztree::IntermediateEvent
  {
    public:
    // quantity
    // 
    typedef ::xml_schema::Int QuantityType;
    typedef ::xsd::cxx::tree::optional< QuantityType > QuantityOptional;
    typedef ::xsd::cxx::tree::traits< QuantityType, char > QuantityTraits;

    const QuantityOptional&
    quantity () const;

    QuantityOptional&
    quantity ();

    void
    quantity (const QuantityType& x);

    void
    quantity (const QuantityOptional& x);

    // Constructors.
    //
    IntermediateEventSet (const IdType&);

    IntermediateEventSet (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    IntermediateEventSet (const IntermediateEventSet& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    virtual IntermediateEventSet*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~IntermediateEventSet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    QuantityOptional quantity_;
  };

  class EventSet: public ::fuzztree::InclusionVariationPoint
  {
    public:
    // quantity
    // 
    typedef ::xml_schema::Int QuantityType;
    typedef ::xsd::cxx::tree::optional< QuantityType > QuantityOptional;
    typedef ::xsd::cxx::tree::traits< QuantityType, char > QuantityTraits;

    const QuantityOptional&
    quantity () const;

    QuantityOptional&
    quantity ();

    void
    quantity (const QuantityType& x);

    void
    quantity (const QuantityOptional& x);

    // Constructors.
    //
    EventSet (const IdType&);

    EventSet (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    EventSet (const EventSet& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual EventSet*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~EventSet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    QuantityOptional quantity_;
  };

  class DecomposedFuzzyProbability: public ::fuzztree::Probability
  {
    public:
    // alphaCuts
    // 
    typedef ::fuzztree::DoubleToIntervalMap AlphaCutsType;
    typedef ::xsd::cxx::tree::sequence< AlphaCutsType > AlphaCutsSequence;
    typedef AlphaCutsSequence::iterator AlphaCutsIterator;
    typedef AlphaCutsSequence::const_iterator AlphaCutsConstIterator;
    typedef ::xsd::cxx::tree::traits< AlphaCutsType, char > AlphaCutsTraits;

    const AlphaCutsSequence&
    alphaCuts () const;

    AlphaCutsSequence&
    alphaCuts ();

    void
    alphaCuts (const AlphaCutsSequence& s);

    // Constructors.
    //
    DecomposedFuzzyProbability ();

    DecomposedFuzzyProbability (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    DecomposedFuzzyProbability (const DecomposedFuzzyProbability& x,
                                ::xml_schema::Flags f = 0,
                                ::xml_schema::Container* c = 0);

    virtual DecomposedFuzzyProbability*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~DecomposedFuzzyProbability ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AlphaCutsSequence alphaCuts_;
  };

  class DoubleToIntervalMap: public ::xml_schema::Type
  {
    public:
    // value
    // 
    typedef ::fuzztree::Interval ValueType;
    typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

    const ValueType&
    value () const;

    ValueType&
    value ();

    void
    value (const ValueType& x);

    void
    value (::std::auto_ptr< ValueType > p);

    // key
    // 
    typedef ::xml_schema::Double KeyType;
    typedef ::xsd::cxx::tree::traits< KeyType, char, ::xsd::cxx::tree::schema_type::double_ > KeyTraits;

    const KeyType&
    key () const;

    KeyType&
    key ();

    void
    key (const KeyType& x);

    // Constructors.
    //
    DoubleToIntervalMap (const ValueType&,
                         const KeyType&);

    DoubleToIntervalMap (::std::auto_ptr< ValueType >&,
                         const KeyType&);

    DoubleToIntervalMap (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    DoubleToIntervalMap (const DoubleToIntervalMap& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

    virtual DoubleToIntervalMap*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~DoubleToIntervalMap ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ValueType > value_;
    ::xsd::cxx::tree::one< KeyType > key_;
  };

  class Interval: public ::xml_schema::Type
  {
    public:
    // lowerBound
    // 
    typedef ::xml_schema::Double LowerBoundType;
    typedef ::xsd::cxx::tree::traits< LowerBoundType, char, ::xsd::cxx::tree::schema_type::double_ > LowerBoundTraits;

    const LowerBoundType&
    lowerBound () const;

    LowerBoundType&
    lowerBound ();

    void
    lowerBound (const LowerBoundType& x);

    // upperBound
    // 
    typedef ::xml_schema::Double UpperBoundType;
    typedef ::xsd::cxx::tree::traits< UpperBoundType, char, ::xsd::cxx::tree::schema_type::double_ > UpperBoundTraits;

    const UpperBoundType&
    upperBound () const;

    UpperBoundType&
    upperBound ();

    void
    upperBound (const UpperBoundType& x);

    // Constructors.
    //
    Interval (const LowerBoundType&,
              const UpperBoundType&);

    Interval (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    Interval (const Interval& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual Interval*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Interval ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< LowerBoundType > lowerBound_;
    ::xsd::cxx::tree::one< UpperBoundType > upperBound_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace fuzztree
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (const ::std::string& uri,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (const ::std::string& uri,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::std::istream& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::std::istream& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::xercesc::InputSource& is,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::xercesc::InputSource& is,
            ::xml_schema::ErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::fuzztree::FuzzTree >
  fuzzTree (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::Flags f = 0,
            const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace fuzztree
{
  void
  operator<< (::xercesc::DOMElement&, const AnnotatedElement&);

  void
  operator<< (::xercesc::DOMElement&, const Model&);

  void
  operator<< (::xercesc::DOMElement&, const FuzzTree&);

  // Serialize to std::ostream.
  //

  void
  fuzzTree (::std::ostream& os,
            const ::fuzztree::FuzzTree& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  fuzzTree (::std::ostream& os,
            const ::fuzztree::FuzzTree& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  fuzzTree (::std::ostream& os,
            const ::fuzztree::FuzzTree& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  fuzzTree (::xercesc::XMLFormatTarget& ft,
            const ::fuzztree::FuzzTree& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  fuzzTree (::xercesc::XMLFormatTarget& ft,
            const ::fuzztree::FuzzTree& x, 
            ::xml_schema::ErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  void
  fuzzTree (::xercesc::XMLFormatTarget& ft,
            const ::fuzztree::FuzzTree& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  fuzzTree (::xercesc::DOMDocument& d,
            const ::fuzztree::FuzzTree& x,
            ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  fuzzTree (const ::fuzztree::FuzzTree& x, 
            const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
            ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const Node&);

  void
  operator<< (::xercesc::DOMElement&, const ChildNode&);

  void
  operator<< (::xercesc::DOMElement&, const Gate&);

  void
  operator<< (::xercesc::DOMElement&, const VariationPoint&);

  void
  operator<< (::xercesc::DOMElement&, const InclusionVariationPoint&);

  void
  operator<< (::xercesc::DOMElement&, const BasicEvent&);

  void
  operator<< (::xercesc::DOMElement&, const TopEvent&);

  void
  operator<< (::xercesc::DOMElement&, const And&);

  void
  operator<< (::xercesc::DOMElement&, const Or&);

  void
  operator<< (::xercesc::DOMElement&, const Xor&);

  void
  operator<< (::xercesc::DOMElement&, const VotingOr&);

  void
  operator<< (::xercesc::DOMElement&, const FeatureVariationPoint&);

  void
  operator<< (::xercesc::DOMElement&, const RedundancyVariationPoint&);

  void
  operator<< (::xercesc::DOMElement&, const TransferIn&);

  void
  operator<< (::xercesc::DOMElement&, const Annotation&);

  void
  operator<< (::xercesc::DOMAttr&, const Annotation&);

  void
  operator<< (::xml_schema::ListStream&,
              const Annotation&);

  void
  operator<< (::xercesc::DOMElement&, const Probability&);

  void
  operator<< (::xercesc::DOMAttr&, const Probability&);

  void
  operator<< (::xml_schema::ListStream&,
              const Probability&);

  void
  operator<< (::xercesc::DOMElement&, const CrispProbability&);

  void
  operator<< (::xercesc::DOMElement&, const TriangularFuzzyInterval&);

  void
  operator<< (::xercesc::DOMElement&, const UndevelopedEvent&);

  void
  operator<< (::xercesc::DOMElement&, const IntermediateEvent&);

  void
  operator<< (::xercesc::DOMElement&, const BasicEventSet&);

  void
  operator<< (::xercesc::DOMElement&, const HouseEvent&);

  void
  operator<< (::xercesc::DOMElement&, const IntermediateEventSet&);

  void
  operator<< (::xercesc::DOMElement&, const EventSet&);

  void
  operator<< (::xercesc::DOMElement&, const DecomposedFuzzyProbability&);

  void
  operator<< (::xercesc::DOMElement&, const DoubleToIntervalMap&);

  void
  operator<< (::xercesc::DOMElement&, const Interval&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // C__DEV_FUZZTREES_FUZZTREECONFIGURATION_XML_FUZZTREE_H
